# coding: utf-8

"""
    MolecularMatch MMPower

    MMPower API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@molecularmatch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from mm_power_sdk_python.models.clinical_trial_geo import ClinicalTrialGeo  # noqa: F401,E501


class ClinicalTrialLocations(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'street': 'str',
        'country': 'str',
        'name': 'str',
        'po_box': 'str',
        'city': 'str',
        'state': 'str',
        'zip': 'str',
        'geo': 'ClinicalTrialGeo',
        'status': 'str',
        'first_name': 'str',
        'middle_name': 'str',
        'last_name': 'str',
        'degrees': 'str',
        'phone': 'str',
        'phone_ext': 'str',
        'email': 'str',
        'first_name_backup': 'str',
        'middle_name_backup': 'str',
        'last_name_backup': 'str',
        'degrees_backup': 'str',
        'phone_backup': 'str',
        'phone_ext_backup': 'str',
        'email_backup': 'str',
        'is_in_institution': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'street': 'street',
        'country': 'country',
        'name': 'name',
        'po_box': 'po_box',
        'city': 'city',
        'state': 'state',
        'zip': 'zip',
        'geo': 'geo',
        'status': 'status',
        'first_name': 'first_name',
        'middle_name': 'middle_name',
        'last_name': 'last_name',
        'degrees': 'degrees',
        'phone': 'phone',
        'phone_ext': 'phone_ext',
        'email': 'email',
        'first_name_backup': 'first_name_backup',
        'middle_name_backup': 'middle_name_backup',
        'last_name_backup': 'last_name_backup',
        'degrees_backup': 'degrees_backup',
        'phone_backup': 'phone_backup',
        'phone_ext_backup': 'phone_ext_backup',
        'email_backup': 'email_backup',
        'is_in_institution': 'isInInstitution'
    }

    def __init__(self, id=None, street=None, country=None, name=None, po_box=None, city=None, state=None, zip=None, geo=None, status=None, first_name=None, middle_name=None, last_name=None, degrees=None, phone=None, phone_ext=None, email=None, first_name_backup=None, middle_name_backup=None, last_name_backup=None, degrees_backup=None, phone_backup=None, phone_ext_backup=None, email_backup=None, is_in_institution=None):  # noqa: E501
        """ClinicalTrialLocations - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._street = None
        self._country = None
        self._name = None
        self._po_box = None
        self._city = None
        self._state = None
        self._zip = None
        self._geo = None
        self._status = None
        self._first_name = None
        self._middle_name = None
        self._last_name = None
        self._degrees = None
        self._phone = None
        self._phone_ext = None
        self._email = None
        self._first_name_backup = None
        self._middle_name_backup = None
        self._last_name_backup = None
        self._degrees_backup = None
        self._phone_backup = None
        self._phone_ext_backup = None
        self._email_backup = None
        self._is_in_institution = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if street is not None:
            self.street = street
        if country is not None:
            self.country = country
        if name is not None:
            self.name = name
        if po_box is not None:
            self.po_box = po_box
        if city is not None:
            self.city = city
        if state is not None:
            self.state = state
        if zip is not None:
            self.zip = zip
        if geo is not None:
            self.geo = geo
        if status is not None:
            self.status = status
        if first_name is not None:
            self.first_name = first_name
        if middle_name is not None:
            self.middle_name = middle_name
        if last_name is not None:
            self.last_name = last_name
        if degrees is not None:
            self.degrees = degrees
        if phone is not None:
            self.phone = phone
        if phone_ext is not None:
            self.phone_ext = phone_ext
        if email is not None:
            self.email = email
        if first_name_backup is not None:
            self.first_name_backup = first_name_backup
        if middle_name_backup is not None:
            self.middle_name_backup = middle_name_backup
        if last_name_backup is not None:
            self.last_name_backup = last_name_backup
        if degrees_backup is not None:
            self.degrees_backup = degrees_backup
        if phone_backup is not None:
            self.phone_backup = phone_backup
        if phone_ext_backup is not None:
            self.phone_ext_backup = phone_ext_backup
        if email_backup is not None:
            self.email_backup = email_backup
        if is_in_institution is not None:
            self.is_in_institution = is_in_institution

    @property
    def id(self):
        """Gets the id of this ClinicalTrialLocations.  # noqa: E501


        :return: The id of this ClinicalTrialLocations.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClinicalTrialLocations.


        :param id: The id of this ClinicalTrialLocations.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def street(self):
        """Gets the street of this ClinicalTrialLocations.  # noqa: E501

        Site street address.  # noqa: E501

        :return: The street of this ClinicalTrialLocations.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this ClinicalTrialLocations.

        Site street address.  # noqa: E501

        :param street: The street of this ClinicalTrialLocations.  # noqa: E501
        :type: str
        """

        self._street = street

    @property
    def country(self):
        """Gets the country of this ClinicalTrialLocations.  # noqa: E501

        Site country.  # noqa: E501

        :return: The country of this ClinicalTrialLocations.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this ClinicalTrialLocations.

        Site country.  # noqa: E501

        :param country: The country of this ClinicalTrialLocations.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def name(self):
        """Gets the name of this ClinicalTrialLocations.  # noqa: E501

        Site name.  # noqa: E501

        :return: The name of this ClinicalTrialLocations.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClinicalTrialLocations.

        Site name.  # noqa: E501

        :param name: The name of this ClinicalTrialLocations.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def po_box(self):
        """Gets the po_box of this ClinicalTrialLocations.  # noqa: E501

        Site P.O. Box.  # noqa: E501

        :return: The po_box of this ClinicalTrialLocations.  # noqa: E501
        :rtype: str
        """
        return self._po_box

    @po_box.setter
    def po_box(self, po_box):
        """Sets the po_box of this ClinicalTrialLocations.

        Site P.O. Box.  # noqa: E501

        :param po_box: The po_box of this ClinicalTrialLocations.  # noqa: E501
        :type: str
        """

        self._po_box = po_box

    @property
    def city(self):
        """Gets the city of this ClinicalTrialLocations.  # noqa: E501

        Site city.  # noqa: E501

        :return: The city of this ClinicalTrialLocations.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this ClinicalTrialLocations.

        Site city.  # noqa: E501

        :param city: The city of this ClinicalTrialLocations.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def state(self):
        """Gets the state of this ClinicalTrialLocations.  # noqa: E501

        Site state or sub division.  # noqa: E501

        :return: The state of this ClinicalTrialLocations.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ClinicalTrialLocations.

        Site state or sub division.  # noqa: E501

        :param state: The state of this ClinicalTrialLocations.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def zip(self):
        """Gets the zip of this ClinicalTrialLocations.  # noqa: E501

        Site postal code.  # noqa: E501

        :return: The zip of this ClinicalTrialLocations.  # noqa: E501
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this ClinicalTrialLocations.

        Site postal code.  # noqa: E501

        :param zip: The zip of this ClinicalTrialLocations.  # noqa: E501
        :type: str
        """

        self._zip = zip

    @property
    def geo(self):
        """Gets the geo of this ClinicalTrialLocations.  # noqa: E501


        :return: The geo of this ClinicalTrialLocations.  # noqa: E501
        :rtype: ClinicalTrialGeo
        """
        return self._geo

    @geo.setter
    def geo(self, geo):
        """Sets the geo of this ClinicalTrialLocations.


        :param geo: The geo of this ClinicalTrialLocations.  # noqa: E501
        :type: ClinicalTrialGeo
        """

        self._geo = geo

    @property
    def status(self):
        """Gets the status of this ClinicalTrialLocations.  # noqa: E501

        Site specific recruiting status.  # noqa: E501

        :return: The status of this ClinicalTrialLocations.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ClinicalTrialLocations.

        Site specific recruiting status.  # noqa: E501

        :param status: The status of this ClinicalTrialLocations.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def first_name(self):
        """Gets the first_name of this ClinicalTrialLocations.  # noqa: E501

        Site primary contact first name.  # noqa: E501

        :return: The first_name of this ClinicalTrialLocations.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this ClinicalTrialLocations.

        Site primary contact first name.  # noqa: E501

        :param first_name: The first_name of this ClinicalTrialLocations.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def middle_name(self):
        """Gets the middle_name of this ClinicalTrialLocations.  # noqa: E501

        Site primary contact middle name.  # noqa: E501

        :return: The middle_name of this ClinicalTrialLocations.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this ClinicalTrialLocations.

        Site primary contact middle name.  # noqa: E501

        :param middle_name: The middle_name of this ClinicalTrialLocations.  # noqa: E501
        :type: str
        """

        self._middle_name = middle_name

    @property
    def last_name(self):
        """Gets the last_name of this ClinicalTrialLocations.  # noqa: E501

        Site primary contact last name.  # noqa: E501

        :return: The last_name of this ClinicalTrialLocations.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this ClinicalTrialLocations.

        Site primary contact last name.  # noqa: E501

        :param last_name: The last_name of this ClinicalTrialLocations.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def degrees(self):
        """Gets the degrees of this ClinicalTrialLocations.  # noqa: E501

        Site primary contact degrees.  # noqa: E501

        :return: The degrees of this ClinicalTrialLocations.  # noqa: E501
        :rtype: str
        """
        return self._degrees

    @degrees.setter
    def degrees(self, degrees):
        """Sets the degrees of this ClinicalTrialLocations.

        Site primary contact degrees.  # noqa: E501

        :param degrees: The degrees of this ClinicalTrialLocations.  # noqa: E501
        :type: str
        """

        self._degrees = degrees

    @property
    def phone(self):
        """Gets the phone of this ClinicalTrialLocations.  # noqa: E501

        Site primary contact phone number.  # noqa: E501

        :return: The phone of this ClinicalTrialLocations.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this ClinicalTrialLocations.

        Site primary contact phone number.  # noqa: E501

        :param phone: The phone of this ClinicalTrialLocations.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def phone_ext(self):
        """Gets the phone_ext of this ClinicalTrialLocations.  # noqa: E501

        Site primary contact phone number extension.  # noqa: E501

        :return: The phone_ext of this ClinicalTrialLocations.  # noqa: E501
        :rtype: str
        """
        return self._phone_ext

    @phone_ext.setter
    def phone_ext(self, phone_ext):
        """Sets the phone_ext of this ClinicalTrialLocations.

        Site primary contact phone number extension.  # noqa: E501

        :param phone_ext: The phone_ext of this ClinicalTrialLocations.  # noqa: E501
        :type: str
        """

        self._phone_ext = phone_ext

    @property
    def email(self):
        """Gets the email of this ClinicalTrialLocations.  # noqa: E501

        Site primary contact email address.  # noqa: E501

        :return: The email of this ClinicalTrialLocations.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ClinicalTrialLocations.

        Site primary contact email address.  # noqa: E501

        :param email: The email of this ClinicalTrialLocations.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def first_name_backup(self):
        """Gets the first_name_backup of this ClinicalTrialLocations.  # noqa: E501

        Site backup contact first name.  # noqa: E501

        :return: The first_name_backup of this ClinicalTrialLocations.  # noqa: E501
        :rtype: str
        """
        return self._first_name_backup

    @first_name_backup.setter
    def first_name_backup(self, first_name_backup):
        """Sets the first_name_backup of this ClinicalTrialLocations.

        Site backup contact first name.  # noqa: E501

        :param first_name_backup: The first_name_backup of this ClinicalTrialLocations.  # noqa: E501
        :type: str
        """

        self._first_name_backup = first_name_backup

    @property
    def middle_name_backup(self):
        """Gets the middle_name_backup of this ClinicalTrialLocations.  # noqa: E501

        Site backup contact middle name.  # noqa: E501

        :return: The middle_name_backup of this ClinicalTrialLocations.  # noqa: E501
        :rtype: str
        """
        return self._middle_name_backup

    @middle_name_backup.setter
    def middle_name_backup(self, middle_name_backup):
        """Sets the middle_name_backup of this ClinicalTrialLocations.

        Site backup contact middle name.  # noqa: E501

        :param middle_name_backup: The middle_name_backup of this ClinicalTrialLocations.  # noqa: E501
        :type: str
        """

        self._middle_name_backup = middle_name_backup

    @property
    def last_name_backup(self):
        """Gets the last_name_backup of this ClinicalTrialLocations.  # noqa: E501

        Site backup contact last name.  # noqa: E501

        :return: The last_name_backup of this ClinicalTrialLocations.  # noqa: E501
        :rtype: str
        """
        return self._last_name_backup

    @last_name_backup.setter
    def last_name_backup(self, last_name_backup):
        """Sets the last_name_backup of this ClinicalTrialLocations.

        Site backup contact last name.  # noqa: E501

        :param last_name_backup: The last_name_backup of this ClinicalTrialLocations.  # noqa: E501
        :type: str
        """

        self._last_name_backup = last_name_backup

    @property
    def degrees_backup(self):
        """Gets the degrees_backup of this ClinicalTrialLocations.  # noqa: E501

        Site backup contact degrees.  # noqa: E501

        :return: The degrees_backup of this ClinicalTrialLocations.  # noqa: E501
        :rtype: str
        """
        return self._degrees_backup

    @degrees_backup.setter
    def degrees_backup(self, degrees_backup):
        """Sets the degrees_backup of this ClinicalTrialLocations.

        Site backup contact degrees.  # noqa: E501

        :param degrees_backup: The degrees_backup of this ClinicalTrialLocations.  # noqa: E501
        :type: str
        """

        self._degrees_backup = degrees_backup

    @property
    def phone_backup(self):
        """Gets the phone_backup of this ClinicalTrialLocations.  # noqa: E501

        Site backup contact phone number.  # noqa: E501

        :return: The phone_backup of this ClinicalTrialLocations.  # noqa: E501
        :rtype: str
        """
        return self._phone_backup

    @phone_backup.setter
    def phone_backup(self, phone_backup):
        """Sets the phone_backup of this ClinicalTrialLocations.

        Site backup contact phone number.  # noqa: E501

        :param phone_backup: The phone_backup of this ClinicalTrialLocations.  # noqa: E501
        :type: str
        """

        self._phone_backup = phone_backup

    @property
    def phone_ext_backup(self):
        """Gets the phone_ext_backup of this ClinicalTrialLocations.  # noqa: E501

        Site backup contact phone number extension.  # noqa: E501

        :return: The phone_ext_backup of this ClinicalTrialLocations.  # noqa: E501
        :rtype: str
        """
        return self._phone_ext_backup

    @phone_ext_backup.setter
    def phone_ext_backup(self, phone_ext_backup):
        """Sets the phone_ext_backup of this ClinicalTrialLocations.

        Site backup contact phone number extension.  # noqa: E501

        :param phone_ext_backup: The phone_ext_backup of this ClinicalTrialLocations.  # noqa: E501
        :type: str
        """

        self._phone_ext_backup = phone_ext_backup

    @property
    def email_backup(self):
        """Gets the email_backup of this ClinicalTrialLocations.  # noqa: E501

        Site backup contact email address.  # noqa: E501

        :return: The email_backup of this ClinicalTrialLocations.  # noqa: E501
        :rtype: str
        """
        return self._email_backup

    @email_backup.setter
    def email_backup(self, email_backup):
        """Sets the email_backup of this ClinicalTrialLocations.

        Site backup contact email address.  # noqa: E501

        :param email_backup: The email_backup of this ClinicalTrialLocations.  # noqa: E501
        :type: str
        """

        self._email_backup = email_backup

    @property
    def is_in_institution(self):
        """Gets the is_in_institution of this ClinicalTrialLocations.  # noqa: E501

        If an institutionId was provided for search, indicates if this site is associated with the institution.  # noqa: E501

        :return: The is_in_institution of this ClinicalTrialLocations.  # noqa: E501
        :rtype: bool
        """
        return self._is_in_institution

    @is_in_institution.setter
    def is_in_institution(self, is_in_institution):
        """Sets the is_in_institution of this ClinicalTrialLocations.

        If an institutionId was provided for search, indicates if this site is associated with the institution.  # noqa: E501

        :param is_in_institution: The is_in_institution of this ClinicalTrialLocations.  # noqa: E501
        :type: bool
        """

        self._is_in_institution = is_in_institution

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClinicalTrialLocations, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClinicalTrialLocations):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
