# coding: utf-8

"""
    MolecularMatch MMPower

    MMPower API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@molecularmatch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from mm_power_sdk_python.models.agency import Agency  # noqa: F401,E501


class ClinicalTrialSponsors(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'lead_sponsor': 'Agency',
        'collaborator': 'list[Agency]'
    }

    attribute_map = {
        'lead_sponsor': 'lead_sponsor',
        'collaborator': 'collaborator'
    }

    def __init__(self, lead_sponsor=None, collaborator=None):  # noqa: E501
        """ClinicalTrialSponsors - a model defined in Swagger"""  # noqa: E501
        self._lead_sponsor = None
        self._collaborator = None
        self.discriminator = None
        if lead_sponsor is not None:
            self.lead_sponsor = lead_sponsor
        if collaborator is not None:
            self.collaborator = collaborator

    @property
    def lead_sponsor(self):
        """Gets the lead_sponsor of this ClinicalTrialSponsors.  # noqa: E501


        :return: The lead_sponsor of this ClinicalTrialSponsors.  # noqa: E501
        :rtype: Agency
        """
        return self._lead_sponsor

    @lead_sponsor.setter
    def lead_sponsor(self, lead_sponsor):
        """Sets the lead_sponsor of this ClinicalTrialSponsors.


        :param lead_sponsor: The lead_sponsor of this ClinicalTrialSponsors.  # noqa: E501
        :type: Agency
        """

        self._lead_sponsor = lead_sponsor

    @property
    def collaborator(self):
        """Gets the collaborator of this ClinicalTrialSponsors.  # noqa: E501

        An organization other than the sponsor that provides support for a clinical study. This support may include activities related to funding, design, implementation, data analysis, or reporting.  # noqa: E501

        :return: The collaborator of this ClinicalTrialSponsors.  # noqa: E501
        :rtype: list[Agency]
        """
        return self._collaborator

    @collaborator.setter
    def collaborator(self, collaborator):
        """Sets the collaborator of this ClinicalTrialSponsors.

        An organization other than the sponsor that provides support for a clinical study. This support may include activities related to funding, design, implementation, data analysis, or reporting.  # noqa: E501

        :param collaborator: The collaborator of this ClinicalTrialSponsors.  # noqa: E501
        :type: list[Agency]
        """

        self._collaborator = collaborator

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClinicalTrialSponsors, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClinicalTrialSponsors):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
