# coding: utf-8

"""
    MolecularMatch MMPower

    MMPower API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@molecularmatch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class DrugAvailability(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'region': 'str',
        'max_phase': 'int',
        'marketed_prescription': 'bool',
        'generic_available': 'bool',
        'pre_market_cancelled': 'bool',
        'post_market_cancelled': 'bool'
    }

    attribute_map = {
        'region': 'region',
        'max_phase': 'max_phase',
        'marketed_prescription': 'marketed_prescription',
        'generic_available': 'generic_available',
        'pre_market_cancelled': 'pre_market_cancelled',
        'post_market_cancelled': 'post_market_cancelled'
    }

    def __init__(self, region=None, max_phase=None, marketed_prescription=None, generic_available=None, pre_market_cancelled=None, post_market_cancelled=None):  # noqa: E501
        """DrugAvailability - a model defined in Swagger"""  # noqa: E501
        self._region = None
        self._max_phase = None
        self._marketed_prescription = None
        self._generic_available = None
        self._pre_market_cancelled = None
        self._post_market_cancelled = None
        self.discriminator = None
        self.region = region
        self.max_phase = max_phase
        self.marketed_prescription = marketed_prescription
        self.generic_available = generic_available
        self.pre_market_cancelled = pre_market_cancelled
        self.post_market_cancelled = post_market_cancelled

    @property
    def region(self):
        """Gets the region of this DrugAvailability.  # noqa: E501


        :return: The region of this DrugAvailability.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this DrugAvailability.


        :param region: The region of this DrugAvailability.  # noqa: E501
        :type: str
        """
        if region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")  # noqa: E501

        self._region = region

    @property
    def max_phase(self):
        """Gets the max_phase of this DrugAvailability.  # noqa: E501


        :return: The max_phase of this DrugAvailability.  # noqa: E501
        :rtype: int
        """
        return self._max_phase

    @max_phase.setter
    def max_phase(self, max_phase):
        """Sets the max_phase of this DrugAvailability.


        :param max_phase: The max_phase of this DrugAvailability.  # noqa: E501
        :type: int
        """
        if max_phase is None:
            raise ValueError("Invalid value for `max_phase`, must not be `None`")  # noqa: E501

        self._max_phase = max_phase

    @property
    def marketed_prescription(self):
        """Gets the marketed_prescription of this DrugAvailability.  # noqa: E501


        :return: The marketed_prescription of this DrugAvailability.  # noqa: E501
        :rtype: bool
        """
        return self._marketed_prescription

    @marketed_prescription.setter
    def marketed_prescription(self, marketed_prescription):
        """Sets the marketed_prescription of this DrugAvailability.


        :param marketed_prescription: The marketed_prescription of this DrugAvailability.  # noqa: E501
        :type: bool
        """
        if marketed_prescription is None:
            raise ValueError("Invalid value for `marketed_prescription`, must not be `None`")  # noqa: E501

        self._marketed_prescription = marketed_prescription

    @property
    def generic_available(self):
        """Gets the generic_available of this DrugAvailability.  # noqa: E501


        :return: The generic_available of this DrugAvailability.  # noqa: E501
        :rtype: bool
        """
        return self._generic_available

    @generic_available.setter
    def generic_available(self, generic_available):
        """Sets the generic_available of this DrugAvailability.


        :param generic_available: The generic_available of this DrugAvailability.  # noqa: E501
        :type: bool
        """
        if generic_available is None:
            raise ValueError("Invalid value for `generic_available`, must not be `None`")  # noqa: E501

        self._generic_available = generic_available

    @property
    def pre_market_cancelled(self):
        """Gets the pre_market_cancelled of this DrugAvailability.  # noqa: E501


        :return: The pre_market_cancelled of this DrugAvailability.  # noqa: E501
        :rtype: bool
        """
        return self._pre_market_cancelled

    @pre_market_cancelled.setter
    def pre_market_cancelled(self, pre_market_cancelled):
        """Sets the pre_market_cancelled of this DrugAvailability.


        :param pre_market_cancelled: The pre_market_cancelled of this DrugAvailability.  # noqa: E501
        :type: bool
        """
        if pre_market_cancelled is None:
            raise ValueError("Invalid value for `pre_market_cancelled`, must not be `None`")  # noqa: E501

        self._pre_market_cancelled = pre_market_cancelled

    @property
    def post_market_cancelled(self):
        """Gets the post_market_cancelled of this DrugAvailability.  # noqa: E501


        :return: The post_market_cancelled of this DrugAvailability.  # noqa: E501
        :rtype: bool
        """
        return self._post_market_cancelled

    @post_market_cancelled.setter
    def post_market_cancelled(self, post_market_cancelled):
        """Sets the post_market_cancelled of this DrugAvailability.


        :param post_market_cancelled: The post_market_cancelled of this DrugAvailability.  # noqa: E501
        :type: bool
        """
        if post_market_cancelled is None:
            raise ValueError("Invalid value for `post_market_cancelled`, must not be `None`")  # noqa: E501

        self._post_market_cancelled = post_market_cancelled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DrugAvailability, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DrugAvailability):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
