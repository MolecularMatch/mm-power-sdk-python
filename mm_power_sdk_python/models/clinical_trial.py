# coding: utf-8

"""
    MolecularMatch MMPower

    MMPower API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@molecularmatch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from mm_power_sdk_python.models.arm_group import ArmGroup  # noqa: F401,E501
from mm_power_sdk_python.models.clinical_trial_countries import ClinicalTrialCountries  # noqa: F401,E501
from mm_power_sdk_python.models.clinical_trial_location_summary import ClinicalTrialLocationSummary  # noqa: F401,E501
from mm_power_sdk_python.models.clinical_trial_locations import ClinicalTrialLocations  # noqa: F401,E501
from mm_power_sdk_python.models.clinical_trial_sponsors import ClinicalTrialSponsors  # noqa: F401,E501
from mm_power_sdk_python.models.clinical_trial_synonyms import ClinicalTrialSynonyms  # noqa: F401,E501
from mm_power_sdk_python.models.contact import Contact  # noqa: F401,E501
from mm_power_sdk_python.models.eligibility import Eligibility  # noqa: F401,E501
from mm_power_sdk_python.models.intervention import Intervention  # noqa: F401,E501
from mm_power_sdk_python.models.molecular_alteration import MolecularAlteration  # noqa: F401,E501
from mm_power_sdk_python.models.outcome import Outcome  # noqa: F401,E501
from mm_power_sdk_python.models.study_design import StudyDesign  # noqa: F401,E501
from mm_power_sdk_python.models.tag import Tag  # noqa: F401,E501


class ClinicalTrial(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mboost': 'float',
        'import_date': 'datetime',
        'id': 'str',
        'source': 'str',
        'brief_title': 'str',
        'patient_title': 'str',
        'title': 'str',
        'brief_summary': 'str',
        'brief_summary_preserved': 'str',
        'summary': 'str',
        'summary_preserved': 'str',
        'status': 'str',
        'phase': 'str',
        'study_type': 'str',
        'study_design': 'StudyDesign',
        'start_date': 'datetime',
        'completion_date': 'datetime',
        'first_received_date': 'datetime',
        'last_changed_date': 'datetime',
        'verification_date': 'datetime',
        'sponsors': 'list[ClinicalTrialSponsors]',
        'conditions': 'list[str]',
        'interventions': 'list[Intervention]',
        'keywords': 'list[str]',
        'arm_groups': 'list[ArmGroup]',
        'primary_outcomes': 'list[Outcome]',
        'secondary_outcomes': 'list[Outcome]',
        'other_outcomes': 'list[Outcome]',
        'eligibility': 'Eligibility',
        'enrollment': 'int',
        'min_age': 'float',
        'max_age': 'float',
        'gender': 'list[str]',
        'overall_official': 'list[Contact]',
        'overall_contact': 'Contact',
        'overall_contact_backup': 'Contact',
        'location_summary': 'ClinicalTrialLocationSummary',
        'locations': 'list[ClinicalTrialLocations]',
        'countries': 'list[ClinicalTrialCountries]',
        'inclusion_criteria': 'str',
        'inclusion_criteria_preserved': 'str',
        'exclusion_criteria': 'str',
        'exclusion_criteria_preserved': 'str',
        'synonyms': 'list[ClinicalTrialSynonyms]',
        'acronym': 'str',
        'link': 'str',
        'tags': 'list[Tag]',
        'molecular_alterations': 'list[MolecularAlteration]'
    }

    attribute_map = {
        'mboost': 'mboost',
        'import_date': 'importDate',
        'id': 'id',
        'source': 'source',
        'brief_title': 'briefTitle',
        'patient_title': 'patientTitle',
        'title': 'title',
        'brief_summary': 'briefSummary',
        'brief_summary_preserved': 'briefSummaryPreserved',
        'summary': 'summary',
        'summary_preserved': 'summaryPreserved',
        'status': 'status',
        'phase': 'phase',
        'study_type': 'studyType',
        'study_design': 'studyDesign',
        'start_date': 'startDate',
        'completion_date': 'completionDate',
        'first_received_date': 'firstReceivedDate',
        'last_changed_date': 'lastChangedDate',
        'verification_date': 'verificationDate',
        'sponsors': 'sponsors',
        'conditions': 'conditions',
        'interventions': 'interventions',
        'keywords': 'keywords',
        'arm_groups': 'armGroups',
        'primary_outcomes': 'primaryOutcomes',
        'secondary_outcomes': 'secondaryOutcomes',
        'other_outcomes': 'otherOutcomes',
        'eligibility': 'eligibility',
        'enrollment': 'enrollment',
        'min_age': 'minAge',
        'max_age': 'maxAge',
        'gender': 'gender',
        'overall_official': 'overallOfficial',
        'overall_contact': 'overallContact',
        'overall_contact_backup': 'overallContactBackup',
        'location_summary': 'locationSummary',
        'locations': 'locations',
        'countries': 'countries',
        'inclusion_criteria': 'inclusionCriteria',
        'inclusion_criteria_preserved': 'inclusionCriteriaPreserved',
        'exclusion_criteria': 'exclusionCriteria',
        'exclusion_criteria_preserved': 'exclusionCriteriaPreserved',
        'synonyms': 'synonyms',
        'acronym': 'acronym',
        'link': 'link',
        'tags': 'tags',
        'molecular_alterations': 'molecularAlterations'
    }

    def __init__(self, mboost=None, import_date=None, id=None, source=None, brief_title=None, patient_title=None, title=None, brief_summary=None, brief_summary_preserved=None, summary=None, summary_preserved=None, status=None, phase=None, study_type=None, study_design=None, start_date=None, completion_date=None, first_received_date=None, last_changed_date=None, verification_date=None, sponsors=None, conditions=None, interventions=None, keywords=None, arm_groups=None, primary_outcomes=None, secondary_outcomes=None, other_outcomes=None, eligibility=None, enrollment=None, min_age=None, max_age=None, gender=None, overall_official=None, overall_contact=None, overall_contact_backup=None, location_summary=None, locations=None, countries=None, inclusion_criteria=None, inclusion_criteria_preserved=None, exclusion_criteria=None, exclusion_criteria_preserved=None, synonyms=None, acronym=None, link=None, tags=None, molecular_alterations=None):  # noqa: E501
        """ClinicalTrial - a model defined in Swagger"""  # noqa: E501
        self._mboost = None
        self._import_date = None
        self._id = None
        self._source = None
        self._brief_title = None
        self._patient_title = None
        self._title = None
        self._brief_summary = None
        self._brief_summary_preserved = None
        self._summary = None
        self._summary_preserved = None
        self._status = None
        self._phase = None
        self._study_type = None
        self._study_design = None
        self._start_date = None
        self._completion_date = None
        self._first_received_date = None
        self._last_changed_date = None
        self._verification_date = None
        self._sponsors = None
        self._conditions = None
        self._interventions = None
        self._keywords = None
        self._arm_groups = None
        self._primary_outcomes = None
        self._secondary_outcomes = None
        self._other_outcomes = None
        self._eligibility = None
        self._enrollment = None
        self._min_age = None
        self._max_age = None
        self._gender = None
        self._overall_official = None
        self._overall_contact = None
        self._overall_contact_backup = None
        self._location_summary = None
        self._locations = None
        self._countries = None
        self._inclusion_criteria = None
        self._inclusion_criteria_preserved = None
        self._exclusion_criteria = None
        self._exclusion_criteria_preserved = None
        self._synonyms = None
        self._acronym = None
        self._link = None
        self._tags = None
        self._molecular_alterations = None
        self.discriminator = None
        if mboost is not None:
            self.mboost = mboost
        if import_date is not None:
            self.import_date = import_date
        self.id = id
        self.source = source
        if brief_title is not None:
            self.brief_title = brief_title
        if patient_title is not None:
            self.patient_title = patient_title
        if title is not None:
            self.title = title
        if brief_summary is not None:
            self.brief_summary = brief_summary
        if brief_summary_preserved is not None:
            self.brief_summary_preserved = brief_summary_preserved
        if summary is not None:
            self.summary = summary
        if summary_preserved is not None:
            self.summary_preserved = summary_preserved
        if status is not None:
            self.status = status
        if phase is not None:
            self.phase = phase
        if study_type is not None:
            self.study_type = study_type
        if study_design is not None:
            self.study_design = study_design
        if start_date is not None:
            self.start_date = start_date
        if completion_date is not None:
            self.completion_date = completion_date
        if first_received_date is not None:
            self.first_received_date = first_received_date
        if last_changed_date is not None:
            self.last_changed_date = last_changed_date
        if verification_date is not None:
            self.verification_date = verification_date
        if sponsors is not None:
            self.sponsors = sponsors
        if conditions is not None:
            self.conditions = conditions
        if interventions is not None:
            self.interventions = interventions
        if keywords is not None:
            self.keywords = keywords
        if arm_groups is not None:
            self.arm_groups = arm_groups
        if primary_outcomes is not None:
            self.primary_outcomes = primary_outcomes
        if secondary_outcomes is not None:
            self.secondary_outcomes = secondary_outcomes
        if other_outcomes is not None:
            self.other_outcomes = other_outcomes
        if eligibility is not None:
            self.eligibility = eligibility
        if enrollment is not None:
            self.enrollment = enrollment
        self.min_age = min_age
        self.max_age = max_age
        if gender is not None:
            self.gender = gender
        if overall_official is not None:
            self.overall_official = overall_official
        if overall_contact is not None:
            self.overall_contact = overall_contact
        if overall_contact_backup is not None:
            self.overall_contact_backup = overall_contact_backup
        if location_summary is not None:
            self.location_summary = location_summary
        if locations is not None:
            self.locations = locations
        if countries is not None:
            self.countries = countries
        if inclusion_criteria is not None:
            self.inclusion_criteria = inclusion_criteria
        if inclusion_criteria_preserved is not None:
            self.inclusion_criteria_preserved = inclusion_criteria_preserved
        if exclusion_criteria is not None:
            self.exclusion_criteria = exclusion_criteria
        if exclusion_criteria_preserved is not None:
            self.exclusion_criteria_preserved = exclusion_criteria_preserved
        if synonyms is not None:
            self.synonyms = synonyms
        if acronym is not None:
            self.acronym = acronym
        if link is not None:
            self.link = link
        if tags is not None:
            self.tags = tags
        if molecular_alterations is not None:
            self.molecular_alterations = molecular_alterations

    @property
    def mboost(self):
        """Gets the mboost of this ClinicalTrial.  # noqa: E501

        intrinsic boost to the record.  # noqa: E501

        :return: The mboost of this ClinicalTrial.  # noqa: E501
        :rtype: float
        """
        return self._mboost

    @mboost.setter
    def mboost(self, mboost):
        """Sets the mboost of this ClinicalTrial.

        intrinsic boost to the record.  # noqa: E501

        :param mboost: The mboost of this ClinicalTrial.  # noqa: E501
        :type: float
        """

        self._mboost = mboost

    @property
    def import_date(self):
        """Gets the import_date of this ClinicalTrial.  # noqa: E501

        date this record was imported into the MolecularMatch database.  # noqa: E501

        :return: The import_date of this ClinicalTrial.  # noqa: E501
        :rtype: datetime
        """
        return self._import_date

    @import_date.setter
    def import_date(self, import_date):
        """Sets the import_date of this ClinicalTrial.

        date this record was imported into the MolecularMatch database.  # noqa: E501

        :param import_date: The import_date of this ClinicalTrial.  # noqa: E501
        :type: datetime
        """

        self._import_date = import_date

    @property
    def id(self):
        """Gets the id of this ClinicalTrial.  # noqa: E501

        unique identifier.  # noqa: E501

        :return: The id of this ClinicalTrial.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClinicalTrial.

        unique identifier.  # noqa: E501

        :param id: The id of this ClinicalTrial.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def source(self):
        """Gets the source of this ClinicalTrial.  # noqa: E501

        native data source of this record  # noqa: E501

        :return: The source of this ClinicalTrial.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ClinicalTrial.

        native data source of this record  # noqa: E501

        :param source: The source of this ClinicalTrial.  # noqa: E501
        :type: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def brief_title(self):
        """Gets the brief_title of this ClinicalTrial.  # noqa: E501

        A short title of the clinical study written in language intended for the lay public. The title should include, where possible, information on the participants, condition being evaluated, and intervention(s) studied.  # noqa: E501

        :return: The brief_title of this ClinicalTrial.  # noqa: E501
        :rtype: str
        """
        return self._brief_title

    @brief_title.setter
    def brief_title(self, brief_title):
        """Sets the brief_title of this ClinicalTrial.

        A short title of the clinical study written in language intended for the lay public. The title should include, where possible, information on the participants, condition being evaluated, and intervention(s) studied.  # noqa: E501

        :param brief_title: The brief_title of this ClinicalTrial.  # noqa: E501
        :type: str
        """

        self._brief_title = brief_title

    @property
    def patient_title(self):
        """Gets the patient_title of this ClinicalTrial.  # noqa: E501

        Patient friendly title for the clinical trial.  # noqa: E501

        :return: The patient_title of this ClinicalTrial.  # noqa: E501
        :rtype: str
        """
        return self._patient_title

    @patient_title.setter
    def patient_title(self, patient_title):
        """Sets the patient_title of this ClinicalTrial.

        Patient friendly title for the clinical trial.  # noqa: E501

        :param patient_title: The patient_title of this ClinicalTrial.  # noqa: E501
        :type: str
        """

        self._patient_title = patient_title

    @property
    def title(self):
        """Gets the title of this ClinicalTrial.  # noqa: E501

        Official title for the clinical trial.  # noqa: E501

        :return: The title of this ClinicalTrial.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ClinicalTrial.

        Official title for the clinical trial.  # noqa: E501

        :param title: The title of this ClinicalTrial.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def brief_summary(self):
        """Gets the brief_summary of this ClinicalTrial.  # noqa: E501

        A short description of the clinical study, including a brief statement of the clinical study's hypothesis, written in language intended for the lay public.  # noqa: E501

        :return: The brief_summary of this ClinicalTrial.  # noqa: E501
        :rtype: str
        """
        return self._brief_summary

    @brief_summary.setter
    def brief_summary(self, brief_summary):
        """Sets the brief_summary of this ClinicalTrial.

        A short description of the clinical study, including a brief statement of the clinical study's hypothesis, written in language intended for the lay public.  # noqa: E501

        :param brief_summary: The brief_summary of this ClinicalTrial.  # noqa: E501
        :type: str
        """

        self._brief_summary = brief_summary

    @property
    def brief_summary_preserved(self):
        """Gets the brief_summary_preserved of this ClinicalTrial.  # noqa: E501

        Formatted rendition of the briefSummary.  # noqa: E501

        :return: The brief_summary_preserved of this ClinicalTrial.  # noqa: E501
        :rtype: str
        """
        return self._brief_summary_preserved

    @brief_summary_preserved.setter
    def brief_summary_preserved(self, brief_summary_preserved):
        """Sets the brief_summary_preserved of this ClinicalTrial.

        Formatted rendition of the briefSummary.  # noqa: E501

        :param brief_summary_preserved: The brief_summary_preserved of this ClinicalTrial.  # noqa: E501
        :type: str
        """

        self._brief_summary_preserved = brief_summary_preserved

    @property
    def summary(self):
        """Gets the summary of this ClinicalTrial.  # noqa: E501

        Extended description of the protocol, including more technical information (as compared to the Brief Summary), if desired. Do not include the entire protocol; do not duplicate information recorded in other data elements, such as Eligibility Criteria or outcome measures.  # noqa: E501

        :return: The summary of this ClinicalTrial.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this ClinicalTrial.

        Extended description of the protocol, including more technical information (as compared to the Brief Summary), if desired. Do not include the entire protocol; do not duplicate information recorded in other data elements, such as Eligibility Criteria or outcome measures.  # noqa: E501

        :param summary: The summary of this ClinicalTrial.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def summary_preserved(self):
        """Gets the summary_preserved of this ClinicalTrial.  # noqa: E501

        Formatted rendition of the summary.  # noqa: E501

        :return: The summary_preserved of this ClinicalTrial.  # noqa: E501
        :rtype: str
        """
        return self._summary_preserved

    @summary_preserved.setter
    def summary_preserved(self, summary_preserved):
        """Sets the summary_preserved of this ClinicalTrial.

        Formatted rendition of the summary.  # noqa: E501

        :param summary_preserved: The summary_preserved of this ClinicalTrial.  # noqa: E501
        :type: str
        """

        self._summary_preserved = summary_preserved

    @property
    def status(self):
        """Gets the status of this ClinicalTrial.  # noqa: E501

        Trial recruiting status.  # noqa: E501

        :return: The status of this ClinicalTrial.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ClinicalTrial.

        Trial recruiting status.  # noqa: E501

        :param status: The status of this ClinicalTrial.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def phase(self):
        """Gets the phase of this ClinicalTrial.  # noqa: E501

        For a clinical trial of a drug product (including a biological product), the numerical phase of such clinical trial, consistent with terminology in 21 CFR 312.21 and in 21 CFR 312.85 for phase 4 studies.  # noqa: E501

        :return: The phase of this ClinicalTrial.  # noqa: E501
        :rtype: str
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this ClinicalTrial.

        For a clinical trial of a drug product (including a biological product), the numerical phase of such clinical trial, consistent with terminology in 21 CFR 312.21 and in 21 CFR 312.85 for phase 4 studies.  # noqa: E501

        :param phase: The phase of this ClinicalTrial.  # noqa: E501
        :type: str
        """

        self._phase = phase

    @property
    def study_type(self):
        """Gets the study_type of this ClinicalTrial.  # noqa: E501

        The nature of the investigation or investigational use for which clinical study information is being submitted.  # noqa: E501

        :return: The study_type of this ClinicalTrial.  # noqa: E501
        :rtype: str
        """
        return self._study_type

    @study_type.setter
    def study_type(self, study_type):
        """Sets the study_type of this ClinicalTrial.

        The nature of the investigation or investigational use for which clinical study information is being submitted.  # noqa: E501

        :param study_type: The study_type of this ClinicalTrial.  # noqa: E501
        :type: str
        """

        self._study_type = study_type

    @property
    def study_design(self):
        """Gets the study_design of this ClinicalTrial.  # noqa: E501


        :return: The study_design of this ClinicalTrial.  # noqa: E501
        :rtype: StudyDesign
        """
        return self._study_design

    @study_design.setter
    def study_design(self, study_design):
        """Sets the study_design of this ClinicalTrial.


        :param study_design: The study_design of this ClinicalTrial.  # noqa: E501
        :type: StudyDesign
        """

        self._study_design = study_design

    @property
    def start_date(self):
        """Gets the start_date of this ClinicalTrial.  # noqa: E501

        The estimated date on which the clinical study will be open for recruitment of participants, or the actual date on which the first participant was enrolled.  # noqa: E501

        :return: The start_date of this ClinicalTrial.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ClinicalTrial.

        The estimated date on which the clinical study will be open for recruitment of participants, or the actual date on which the first participant was enrolled.  # noqa: E501

        :param start_date: The start_date of this ClinicalTrial.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def completion_date(self):
        """Gets the completion_date of this ClinicalTrial.  # noqa: E501

        The date the final participant was examined or received an intervention for purposes of final collection of data for the primary and secondary outcome measures and adverse events (for example, last participant’s last visit), whether the clinical study concluded according to the pre-specified protocol or was terminated  # noqa: E501

        :return: The completion_date of this ClinicalTrial.  # noqa: E501
        :rtype: datetime
        """
        return self._completion_date

    @completion_date.setter
    def completion_date(self, completion_date):
        """Sets the completion_date of this ClinicalTrial.

        The date the final participant was examined or received an intervention for purposes of final collection of data for the primary and secondary outcome measures and adverse events (for example, last participant’s last visit), whether the clinical study concluded according to the pre-specified protocol or was terminated  # noqa: E501

        :param completion_date: The completion_date of this ClinicalTrial.  # noqa: E501
        :type: datetime
        """

        self._completion_date = completion_date

    @property
    def first_received_date(self):
        """Gets the first_received_date of this ClinicalTrial.  # noqa: E501

        The date on which the study sponsor or investigator first submitted a study record to the trial registry (see source field).  # noqa: E501

        :return: The first_received_date of this ClinicalTrial.  # noqa: E501
        :rtype: datetime
        """
        return self._first_received_date

    @first_received_date.setter
    def first_received_date(self, first_received_date):
        """Sets the first_received_date of this ClinicalTrial.

        The date on which the study sponsor or investigator first submitted a study record to the trial registry (see source field).  # noqa: E501

        :param first_received_date: The first_received_date of this ClinicalTrial.  # noqa: E501
        :type: datetime
        """

        self._first_received_date = first_received_date

    @property
    def last_changed_date(self):
        """Gets the last_changed_date of this ClinicalTrial.  # noqa: E501

        The most recent date that any information was updated for this trial.  # noqa: E501

        :return: The last_changed_date of this ClinicalTrial.  # noqa: E501
        :rtype: datetime
        """
        return self._last_changed_date

    @last_changed_date.setter
    def last_changed_date(self, last_changed_date):
        """Sets the last_changed_date of this ClinicalTrial.

        The most recent date that any information was updated for this trial.  # noqa: E501

        :param last_changed_date: The last_changed_date of this ClinicalTrial.  # noqa: E501
        :type: datetime
        """

        self._last_changed_date = last_changed_date

    @property
    def verification_date(self):
        """Gets the verification_date of this ClinicalTrial.  # noqa: E501

        The date on which the responsible party last verified the clinical study information in the entire ClinicalTrials.gov record for the clinical study, even if no additional or updated information is being submitted.  # noqa: E501

        :return: The verification_date of this ClinicalTrial.  # noqa: E501
        :rtype: datetime
        """
        return self._verification_date

    @verification_date.setter
    def verification_date(self, verification_date):
        """Sets the verification_date of this ClinicalTrial.

        The date on which the responsible party last verified the clinical study information in the entire ClinicalTrials.gov record for the clinical study, even if no additional or updated information is being submitted.  # noqa: E501

        :param verification_date: The verification_date of this ClinicalTrial.  # noqa: E501
        :type: datetime
        """

        self._verification_date = verification_date

    @property
    def sponsors(self):
        """Gets the sponsors of this ClinicalTrial.  # noqa: E501

        The list of organizations or persons who initiated the study and who have authority and control over the study.  # noqa: E501

        :return: The sponsors of this ClinicalTrial.  # noqa: E501
        :rtype: list[ClinicalTrialSponsors]
        """
        return self._sponsors

    @sponsors.setter
    def sponsors(self, sponsors):
        """Sets the sponsors of this ClinicalTrial.

        The list of organizations or persons who initiated the study and who have authority and control over the study.  # noqa: E501

        :param sponsors: The sponsors of this ClinicalTrial.  # noqa: E501
        :type: list[ClinicalTrialSponsors]
        """

        self._sponsors = sponsors

    @property
    def conditions(self):
        """Gets the conditions of this ClinicalTrial.  # noqa: E501

        Diseases/Conditions related to this trial.  # noqa: E501

        :return: The conditions of this ClinicalTrial.  # noqa: E501
        :rtype: list[str]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this ClinicalTrial.

        Diseases/Conditions related to this trial.  # noqa: E501

        :param conditions: The conditions of this ClinicalTrial.  # noqa: E501
        :type: list[str]
        """

        self._conditions = conditions

    @property
    def interventions(self):
        """Gets the interventions of this ClinicalTrial.  # noqa: E501

        Specifies the intervention(s) associated with each arm or group.  # noqa: E501

        :return: The interventions of this ClinicalTrial.  # noqa: E501
        :rtype: list[Intervention]
        """
        return self._interventions

    @interventions.setter
    def interventions(self, interventions):
        """Sets the interventions of this ClinicalTrial.

        Specifies the intervention(s) associated with each arm or group.  # noqa: E501

        :param interventions: The interventions of this ClinicalTrial.  # noqa: E501
        :type: list[Intervention]
        """

        self._interventions = interventions

    @property
    def keywords(self):
        """Gets the keywords of this ClinicalTrial.  # noqa: E501

        Words or phrases that best describe the protocol. Keywords help users find studies in the database. Use NLM's Medical Subject Heading (MeSH)-controlled vocabulary terms where appropriate. Be as specific and precise as possible.  # noqa: E501

        :return: The keywords of this ClinicalTrial.  # noqa: E501
        :rtype: list[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this ClinicalTrial.

        Words or phrases that best describe the protocol. Keywords help users find studies in the database. Use NLM's Medical Subject Heading (MeSH)-controlled vocabulary terms where appropriate. Be as specific and precise as possible.  # noqa: E501

        :param keywords: The keywords of this ClinicalTrial.  # noqa: E501
        :type: list[str]
        """

        self._keywords = keywords

    @property
    def arm_groups(self):
        """Gets the arm_groups of this ClinicalTrial.  # noqa: E501

        Pre-specified groups of participants in a clinical trial assigned to receive specific interventions (or no intervention) according to a protocol.  # noqa: E501

        :return: The arm_groups of this ClinicalTrial.  # noqa: E501
        :rtype: list[ArmGroup]
        """
        return self._arm_groups

    @arm_groups.setter
    def arm_groups(self, arm_groups):
        """Sets the arm_groups of this ClinicalTrial.

        Pre-specified groups of participants in a clinical trial assigned to receive specific interventions (or no intervention) according to a protocol.  # noqa: E501

        :param arm_groups: The arm_groups of this ClinicalTrial.  # noqa: E501
        :type: list[ArmGroup]
        """

        self._arm_groups = arm_groups

    @property
    def primary_outcomes(self):
        """Gets the primary_outcomes of this ClinicalTrial.  # noqa: E501


        :return: The primary_outcomes of this ClinicalTrial.  # noqa: E501
        :rtype: list[Outcome]
        """
        return self._primary_outcomes

    @primary_outcomes.setter
    def primary_outcomes(self, primary_outcomes):
        """Sets the primary_outcomes of this ClinicalTrial.


        :param primary_outcomes: The primary_outcomes of this ClinicalTrial.  # noqa: E501
        :type: list[Outcome]
        """

        self._primary_outcomes = primary_outcomes

    @property
    def secondary_outcomes(self):
        """Gets the secondary_outcomes of this ClinicalTrial.  # noqa: E501


        :return: The secondary_outcomes of this ClinicalTrial.  # noqa: E501
        :rtype: list[Outcome]
        """
        return self._secondary_outcomes

    @secondary_outcomes.setter
    def secondary_outcomes(self, secondary_outcomes):
        """Sets the secondary_outcomes of this ClinicalTrial.


        :param secondary_outcomes: The secondary_outcomes of this ClinicalTrial.  # noqa: E501
        :type: list[Outcome]
        """

        self._secondary_outcomes = secondary_outcomes

    @property
    def other_outcomes(self):
        """Gets the other_outcomes of this ClinicalTrial.  # noqa: E501


        :return: The other_outcomes of this ClinicalTrial.  # noqa: E501
        :rtype: list[Outcome]
        """
        return self._other_outcomes

    @other_outcomes.setter
    def other_outcomes(self, other_outcomes):
        """Sets the other_outcomes of this ClinicalTrial.


        :param other_outcomes: The other_outcomes of this ClinicalTrial.  # noqa: E501
        :type: list[Outcome]
        """

        self._other_outcomes = other_outcomes

    @property
    def eligibility(self):
        """Gets the eligibility of this ClinicalTrial.  # noqa: E501


        :return: The eligibility of this ClinicalTrial.  # noqa: E501
        :rtype: Eligibility
        """
        return self._eligibility

    @eligibility.setter
    def eligibility(self, eligibility):
        """Sets the eligibility of this ClinicalTrial.


        :param eligibility: The eligibility of this ClinicalTrial.  # noqa: E501
        :type: Eligibility
        """

        self._eligibility = eligibility

    @property
    def enrollment(self):
        """Gets the enrollment of this ClinicalTrial.  # noqa: E501

        The estimated total number of participants to be enrolled (target number) or the actual total number of participants that are enrolled in the clinical study.  # noqa: E501

        :return: The enrollment of this ClinicalTrial.  # noqa: E501
        :rtype: int
        """
        return self._enrollment

    @enrollment.setter
    def enrollment(self, enrollment):
        """Sets the enrollment of this ClinicalTrial.

        The estimated total number of participants to be enrolled (target number) or the actual total number of participants that are enrolled in the clinical study.  # noqa: E501

        :param enrollment: The enrollment of this ClinicalTrial.  # noqa: E501
        :type: int
        """

        self._enrollment = enrollment

    @property
    def min_age(self):
        """Gets the min_age of this ClinicalTrial.  # noqa: E501

        The numerical value, if any, for the minimum age a potential participant must meet to be eligible for the clinical study.  # noqa: E501

        :return: The min_age of this ClinicalTrial.  # noqa: E501
        :rtype: float
        """
        return self._min_age

    @min_age.setter
    def min_age(self, min_age):
        """Sets the min_age of this ClinicalTrial.

        The numerical value, if any, for the minimum age a potential participant must meet to be eligible for the clinical study.  # noqa: E501

        :param min_age: The min_age of this ClinicalTrial.  # noqa: E501
        :type: float
        """
        if min_age is None:
            raise ValueError("Invalid value for `min_age`, must not be `None`")  # noqa: E501

        self._min_age = min_age

    @property
    def max_age(self):
        """Gets the max_age of this ClinicalTrial.  # noqa: E501

        The numerical value, if any, for the maximum age a potential participant can be to be eligible for the clinical study.  # noqa: E501

        :return: The max_age of this ClinicalTrial.  # noqa: E501
        :rtype: float
        """
        return self._max_age

    @max_age.setter
    def max_age(self, max_age):
        """Sets the max_age of this ClinicalTrial.

        The numerical value, if any, for the maximum age a potential participant can be to be eligible for the clinical study.  # noqa: E501

        :param max_age: The max_age of this ClinicalTrial.  # noqa: E501
        :type: float
        """
        if max_age is None:
            raise ValueError("Invalid value for `max_age`, must not be `None`")  # noqa: E501

        self._max_age = max_age

    @property
    def gender(self):
        """Gets the gender of this ClinicalTrial.  # noqa: E501

        The sex and, if applicable, gender of the participants eligible to participate in the clinical study.  # noqa: E501

        :return: The gender of this ClinicalTrial.  # noqa: E501
        :rtype: list[str]
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this ClinicalTrial.

        The sex and, if applicable, gender of the participants eligible to participate in the clinical study.  # noqa: E501

        :param gender: The gender of this ClinicalTrial.  # noqa: E501
        :type: list[str]
        """

        self._gender = gender

    @property
    def overall_official(self):
        """Gets the overall_official of this ClinicalTrial.  # noqa: E501

        Person responsible for the overall scientific leadership of the protocol, including study principal investigator.  # noqa: E501

        :return: The overall_official of this ClinicalTrial.  # noqa: E501
        :rtype: list[Contact]
        """
        return self._overall_official

    @overall_official.setter
    def overall_official(self, overall_official):
        """Sets the overall_official of this ClinicalTrial.

        Person responsible for the overall scientific leadership of the protocol, including study principal investigator.  # noqa: E501

        :param overall_official: The overall_official of this ClinicalTrial.  # noqa: E501
        :type: list[Contact]
        """

        self._overall_official = overall_official

    @property
    def overall_contact(self):
        """Gets the overall_contact of this ClinicalTrial.  # noqa: E501


        :return: The overall_contact of this ClinicalTrial.  # noqa: E501
        :rtype: Contact
        """
        return self._overall_contact

    @overall_contact.setter
    def overall_contact(self, overall_contact):
        """Sets the overall_contact of this ClinicalTrial.


        :param overall_contact: The overall_contact of this ClinicalTrial.  # noqa: E501
        :type: Contact
        """

        self._overall_contact = overall_contact

    @property
    def overall_contact_backup(self):
        """Gets the overall_contact_backup of this ClinicalTrial.  # noqa: E501


        :return: The overall_contact_backup of this ClinicalTrial.  # noqa: E501
        :rtype: Contact
        """
        return self._overall_contact_backup

    @overall_contact_backup.setter
    def overall_contact_backup(self, overall_contact_backup):
        """Sets the overall_contact_backup of this ClinicalTrial.


        :param overall_contact_backup: The overall_contact_backup of this ClinicalTrial.  # noqa: E501
        :type: Contact
        """

        self._overall_contact_backup = overall_contact_backup

    @property
    def location_summary(self):
        """Gets the location_summary of this ClinicalTrial.  # noqa: E501


        :return: The location_summary of this ClinicalTrial.  # noqa: E501
        :rtype: ClinicalTrialLocationSummary
        """
        return self._location_summary

    @location_summary.setter
    def location_summary(self, location_summary):
        """Sets the location_summary of this ClinicalTrial.


        :param location_summary: The location_summary of this ClinicalTrial.  # noqa: E501
        :type: ClinicalTrialLocationSummary
        """

        self._location_summary = location_summary

    @property
    def locations(self):
        """Gets the locations of this ClinicalTrial.  # noqa: E501

        Information about the sites offering this trial.  # noqa: E501

        :return: The locations of this ClinicalTrial.  # noqa: E501
        :rtype: list[ClinicalTrialLocations]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this ClinicalTrial.

        Information about the sites offering this trial.  # noqa: E501

        :param locations: The locations of this ClinicalTrial.  # noqa: E501
        :type: list[ClinicalTrialLocations]
        """

        self._locations = locations

    @property
    def countries(self):
        """Gets the countries of this ClinicalTrial.  # noqa: E501

        Countries with sites offering this trial.  # noqa: E501

        :return: The countries of this ClinicalTrial.  # noqa: E501
        :rtype: list[ClinicalTrialCountries]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this ClinicalTrial.

        Countries with sites offering this trial.  # noqa: E501

        :param countries: The countries of this ClinicalTrial.  # noqa: E501
        :type: list[ClinicalTrialCountries]
        """

        self._countries = countries

    @property
    def inclusion_criteria(self):
        """Gets the inclusion_criteria of this ClinicalTrial.  # noqa: E501

        A limited list of criteria for selection of participants in the clinical study, provided in terms of inclusion criteria and suitable for assisting potential participants in identifying clinical studies of interest.  # noqa: E501

        :return: The inclusion_criteria of this ClinicalTrial.  # noqa: E501
        :rtype: str
        """
        return self._inclusion_criteria

    @inclusion_criteria.setter
    def inclusion_criteria(self, inclusion_criteria):
        """Sets the inclusion_criteria of this ClinicalTrial.

        A limited list of criteria for selection of participants in the clinical study, provided in terms of inclusion criteria and suitable for assisting potential participants in identifying clinical studies of interest.  # noqa: E501

        :param inclusion_criteria: The inclusion_criteria of this ClinicalTrial.  # noqa: E501
        :type: str
        """

        self._inclusion_criteria = inclusion_criteria

    @property
    def inclusion_criteria_preserved(self):
        """Gets the inclusion_criteria_preserved of this ClinicalTrial.  # noqa: E501

        Formatted rendition of the inclusionCriteria.  # noqa: E501

        :return: The inclusion_criteria_preserved of this ClinicalTrial.  # noqa: E501
        :rtype: str
        """
        return self._inclusion_criteria_preserved

    @inclusion_criteria_preserved.setter
    def inclusion_criteria_preserved(self, inclusion_criteria_preserved):
        """Sets the inclusion_criteria_preserved of this ClinicalTrial.

        Formatted rendition of the inclusionCriteria.  # noqa: E501

        :param inclusion_criteria_preserved: The inclusion_criteria_preserved of this ClinicalTrial.  # noqa: E501
        :type: str
        """

        self._inclusion_criteria_preserved = inclusion_criteria_preserved

    @property
    def exclusion_criteria(self):
        """Gets the exclusion_criteria of this ClinicalTrial.  # noqa: E501

        A limited list of criteria for selection of participants in the clinical study, provided in terms of exclusion criteria and suitable for assisting potential participants in identifying clinical studies of interest.  # noqa: E501

        :return: The exclusion_criteria of this ClinicalTrial.  # noqa: E501
        :rtype: str
        """
        return self._exclusion_criteria

    @exclusion_criteria.setter
    def exclusion_criteria(self, exclusion_criteria):
        """Sets the exclusion_criteria of this ClinicalTrial.

        A limited list of criteria for selection of participants in the clinical study, provided in terms of exclusion criteria and suitable for assisting potential participants in identifying clinical studies of interest.  # noqa: E501

        :param exclusion_criteria: The exclusion_criteria of this ClinicalTrial.  # noqa: E501
        :type: str
        """

        self._exclusion_criteria = exclusion_criteria

    @property
    def exclusion_criteria_preserved(self):
        """Gets the exclusion_criteria_preserved of this ClinicalTrial.  # noqa: E501

        Formatted rendition of the exclusionCriteria.  # noqa: E501

        :return: The exclusion_criteria_preserved of this ClinicalTrial.  # noqa: E501
        :rtype: str
        """
        return self._exclusion_criteria_preserved

    @exclusion_criteria_preserved.setter
    def exclusion_criteria_preserved(self, exclusion_criteria_preserved):
        """Sets the exclusion_criteria_preserved of this ClinicalTrial.

        Formatted rendition of the exclusionCriteria.  # noqa: E501

        :param exclusion_criteria_preserved: The exclusion_criteria_preserved of this ClinicalTrial.  # noqa: E501
        :type: str
        """

        self._exclusion_criteria_preserved = exclusion_criteria_preserved

    @property
    def synonyms(self):
        """Gets the synonyms of this ClinicalTrial.  # noqa: E501

        Any identifier other than the organization's Unique Protocol Identification Number or the NCT number that is assigned to the clinical study.  # noqa: E501

        :return: The synonyms of this ClinicalTrial.  # noqa: E501
        :rtype: list[ClinicalTrialSynonyms]
        """
        return self._synonyms

    @synonyms.setter
    def synonyms(self, synonyms):
        """Sets the synonyms of this ClinicalTrial.

        Any identifier other than the organization's Unique Protocol Identification Number or the NCT number that is assigned to the clinical study.  # noqa: E501

        :param synonyms: The synonyms of this ClinicalTrial.  # noqa: E501
        :type: list[ClinicalTrialSynonyms]
        """

        self._synonyms = synonyms

    @property
    def acronym(self):
        """Gets the acronym of this ClinicalTrial.  # noqa: E501

        An acronym or abbreviation used publicly to identify the clinical study.  # noqa: E501

        :return: The acronym of this ClinicalTrial.  # noqa: E501
        :rtype: str
        """
        return self._acronym

    @acronym.setter
    def acronym(self, acronym):
        """Sets the acronym of this ClinicalTrial.

        An acronym or abbreviation used publicly to identify the clinical study.  # noqa: E501

        :param acronym: The acronym of this ClinicalTrial.  # noqa: E501
        :type: str
        """

        self._acronym = acronym

    @property
    def link(self):
        """Gets the link of this ClinicalTrial.  # noqa: E501

        URL to registry listing of this trial.  # noqa: E501

        :return: The link of this ClinicalTrial.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this ClinicalTrial.

        URL to registry listing of this trial.  # noqa: E501

        :param link: The link of this ClinicalTrial.  # noqa: E501
        :type: str
        """

        self._link = link

    @property
    def tags(self):
        """Gets the tags of this ClinicalTrial.  # noqa: E501

        Concept associations established for this trial.  # noqa: E501

        :return: The tags of this ClinicalTrial.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ClinicalTrial.

        Concept associations established for this trial.  # noqa: E501

        :param tags: The tags of this ClinicalTrial.  # noqa: E501
        :type: list[Tag]
        """

        self._tags = tags

    @property
    def molecular_alterations(self):
        """Gets the molecular_alterations of this ClinicalTrial.  # noqa: E501

        Molecular concept associations established for this trial.  # noqa: E501

        :return: The molecular_alterations of this ClinicalTrial.  # noqa: E501
        :rtype: list[MolecularAlteration]
        """
        return self._molecular_alterations

    @molecular_alterations.setter
    def molecular_alterations(self, molecular_alterations):
        """Sets the molecular_alterations of this ClinicalTrial.

        Molecular concept associations established for this trial.  # noqa: E501

        :param molecular_alterations: The molecular_alterations of this ClinicalTrial.  # noqa: E501
        :type: list[MolecularAlteration]
        """

        self._molecular_alterations = molecular_alterations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClinicalTrial, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClinicalTrial):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
