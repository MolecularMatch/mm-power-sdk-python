# coding: utf-8

"""
    MolecularMatch MMPower

    MMPower API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@molecularmatch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ArmGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'arm_group_label': 'str',
        'arm_group_type': 'str',
        'description': 'str'
    }

    attribute_map = {
        'arm_group_label': 'arm_group_label',
        'arm_group_type': 'arm_group_type',
        'description': 'description'
    }

    def __init__(self, arm_group_label=None, arm_group_type=None, description=None):  # noqa: E501
        """ArmGroup - a model defined in Swagger"""  # noqa: E501
        self._arm_group_label = None
        self._arm_group_type = None
        self._description = None
        self.discriminator = None
        self.arm_group_label = arm_group_label
        if arm_group_type is not None:
            self.arm_group_type = arm_group_type
        if description is not None:
            self.description = description

    @property
    def arm_group_label(self):
        """Gets the arm_group_label of this ArmGroup.  # noqa: E501

        A label describing a group or subgroup of participants in a clinical trial that receives a specific intervention/treatment, or no intervention, according to the trial's protocol.  # noqa: E501

        :return: The arm_group_label of this ArmGroup.  # noqa: E501
        :rtype: str
        """
        return self._arm_group_label

    @arm_group_label.setter
    def arm_group_label(self, arm_group_label):
        """Sets the arm_group_label of this ArmGroup.

        A label describing a group or subgroup of participants in a clinical trial that receives a specific intervention/treatment, or no intervention, according to the trial's protocol.  # noqa: E501

        :param arm_group_label: The arm_group_label of this ArmGroup.  # noqa: E501
        :type: str
        """
        if arm_group_label is None:
            raise ValueError("Invalid value for `arm_group_label`, must not be `None`")  # noqa: E501

        self._arm_group_label = arm_group_label

    @property
    def arm_group_type(self):
        """Gets the arm_group_type of this ArmGroup.  # noqa: E501

        A general description of the clinical trial arm. It identifies the role of the intervention that participants receive. Types of arms include experimental arm, active comparator arm, placebo comparator arm, sham comparator arm, and no intervention arm.  # noqa: E501

        :return: The arm_group_type of this ArmGroup.  # noqa: E501
        :rtype: str
        """
        return self._arm_group_type

    @arm_group_type.setter
    def arm_group_type(self, arm_group_type):
        """Sets the arm_group_type of this ArmGroup.

        A general description of the clinical trial arm. It identifies the role of the intervention that participants receive. Types of arms include experimental arm, active comparator arm, placebo comparator arm, sham comparator arm, and no intervention arm.  # noqa: E501

        :param arm_group_type: The arm_group_type of this ArmGroup.  # noqa: E501
        :type: str
        """

        self._arm_group_type = arm_group_type

    @property
    def description(self):
        """Gets the description of this ArmGroup.  # noqa: E501

        A description of a group or subgroup of participants in a clinical trial that receives a specific intervention/treatment, or no intervention, according to the trial's protocol.  # noqa: E501

        :return: The description of this ArmGroup.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ArmGroup.

        A description of a group or subgroup of participants in a clinical trial that receives a specific intervention/treatment, or no intervention, according to the trial's protocol.  # noqa: E501

        :param description: The description of this ArmGroup.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ArmGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArmGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
