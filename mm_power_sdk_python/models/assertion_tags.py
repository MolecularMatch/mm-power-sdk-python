# coding: utf-8

"""
    MolecularMatch MMPower

    MMPower API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@molecularmatch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AssertionTags(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'term': 'str',
        'facet': 'str',
        'filter_type': 'str',
        'priority': 'int',
        'suppress': 'bool',
        'composite_key': 'str',
        'generated_by': 'str',
        'generated_by_term': 'str',
        'manual_suppress': 'int',
        'transcript': 'str',
        'primary': 'bool',
        'valid': 'bool'
    }

    attribute_map = {
        'term': 'term',
        'facet': 'facet',
        'filter_type': 'filterType',
        'priority': 'priority',
        'suppress': 'suppress',
        'composite_key': 'compositeKey',
        'generated_by': 'generatedBy',
        'generated_by_term': 'generatedByTerm',
        'manual_suppress': 'manualSuppress',
        'transcript': 'transcript',
        'primary': 'primary',
        'valid': 'valid'
    }

    def __init__(self, term=None, facet=None, filter_type='include', priority=None, suppress=None, composite_key=None, generated_by=None, generated_by_term=None, manual_suppress=None, transcript=None, primary=None, valid=None):  # noqa: E501
        """AssertionTags - a model defined in Swagger"""  # noqa: E501
        self._term = None
        self._facet = None
        self._filter_type = None
        self._priority = None
        self._suppress = None
        self._composite_key = None
        self._generated_by = None
        self._generated_by_term = None
        self._manual_suppress = None
        self._transcript = None
        self._primary = None
        self._valid = None
        self.discriminator = None
        self.term = term
        self.facet = facet
        if filter_type is not None:
            self.filter_type = filter_type
        if priority is not None:
            self.priority = priority
        if suppress is not None:
            self.suppress = suppress
        if composite_key is not None:
            self.composite_key = composite_key
        if generated_by is not None:
            self.generated_by = generated_by
        if generated_by_term is not None:
            self.generated_by_term = generated_by_term
        if manual_suppress is not None:
            self.manual_suppress = manual_suppress
        if transcript is not None:
            self.transcript = transcript
        if primary is not None:
            self.primary = primary
        if valid is not None:
            self.valid = valid

    @property
    def term(self):
        """Gets the term of this AssertionTags.  # noqa: E501

        The associated term.  # noqa: E501

        :return: The term of this AssertionTags.  # noqa: E501
        :rtype: str
        """
        return self._term

    @term.setter
    def term(self, term):
        """Sets the term of this AssertionTags.

        The associated term.  # noqa: E501

        :param term: The term of this AssertionTags.  # noqa: E501
        :type: str
        """
        if term is None:
            raise ValueError("Invalid value for `term`, must not be `None`")  # noqa: E501

        self._term = term

    @property
    def facet(self):
        """Gets the facet of this AssertionTags.  # noqa: E501

        The facet of the associated term.  # noqa: E501

        :return: The facet of this AssertionTags.  # noqa: E501
        :rtype: str
        """
        return self._facet

    @facet.setter
    def facet(self, facet):
        """Sets the facet of this AssertionTags.

        The facet of the associated term.  # noqa: E501

        :param facet: The facet of this AssertionTags.  # noqa: E501
        :type: str
        """
        if facet is None:
            raise ValueError("Invalid value for `facet`, must not be `None`")  # noqa: E501

        self._facet = facet

    @property
    def filter_type(self):
        """Gets the filter_type of this AssertionTags.  # noqa: E501

        Inclusion or exclusion association.  # noqa: E501

        :return: The filter_type of this AssertionTags.  # noqa: E501
        :rtype: str
        """
        return self._filter_type

    @filter_type.setter
    def filter_type(self, filter_type):
        """Sets the filter_type of this AssertionTags.

        Inclusion or exclusion association.  # noqa: E501

        :param filter_type: The filter_type of this AssertionTags.  # noqa: E501
        :type: str
        """
        allowed_values = ["include", "exclude"]  # noqa: E501
        if filter_type not in allowed_values:
            raise ValueError(
                "Invalid value for `filter_type` ({0}), must be one of {1}"  # noqa: E501
                .format(filter_type, allowed_values)
            )

        self._filter_type = filter_type

    @property
    def priority(self):
        """Gets the priority of this AssertionTags.  # noqa: E501

        The quality of the association.  # noqa: E501

        :return: The priority of this AssertionTags.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this AssertionTags.

        The quality of the association.  # noqa: E501

        :param priority: The priority of this AssertionTags.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def suppress(self):
        """Gets the suppress of this AssertionTags.  # noqa: E501

        If true the association is removed.  # noqa: E501

        :return: The suppress of this AssertionTags.  # noqa: E501
        :rtype: bool
        """
        return self._suppress

    @suppress.setter
    def suppress(self, suppress):
        """Sets the suppress of this AssertionTags.

        If true the association is removed.  # noqa: E501

        :param suppress: The suppress of this AssertionTags.  # noqa: E501
        :type: bool
        """

        self._suppress = suppress

    @property
    def composite_key(self):
        """Gets the composite_key of this AssertionTags.  # noqa: E501

        The tag identifier.  # noqa: E501

        :return: The composite_key of this AssertionTags.  # noqa: E501
        :rtype: str
        """
        return self._composite_key

    @composite_key.setter
    def composite_key(self, composite_key):
        """Sets the composite_key of this AssertionTags.

        The tag identifier.  # noqa: E501

        :param composite_key: The composite_key of this AssertionTags.  # noqa: E501
        :type: str
        """

        self._composite_key = composite_key

    @property
    def generated_by(self):
        """Gets the generated_by of this AssertionTags.  # noqa: E501

        The inferring facet.  # noqa: E501

        :return: The generated_by of this AssertionTags.  # noqa: E501
        :rtype: str
        """
        return self._generated_by

    @generated_by.setter
    def generated_by(self, generated_by):
        """Sets the generated_by of this AssertionTags.

        The inferring facet.  # noqa: E501

        :param generated_by: The generated_by of this AssertionTags.  # noqa: E501
        :type: str
        """

        self._generated_by = generated_by

    @property
    def generated_by_term(self):
        """Gets the generated_by_term of this AssertionTags.  # noqa: E501

        The inferring term.  # noqa: E501

        :return: The generated_by_term of this AssertionTags.  # noqa: E501
        :rtype: str
        """
        return self._generated_by_term

    @generated_by_term.setter
    def generated_by_term(self, generated_by_term):
        """Sets the generated_by_term of this AssertionTags.

        The inferring term.  # noqa: E501

        :param generated_by_term: The generated_by_term of this AssertionTags.  # noqa: E501
        :type: str
        """

        self._generated_by_term = generated_by_term

    @property
    def manual_suppress(self):
        """Gets the manual_suppress of this AssertionTags.  # noqa: E501

        Indication of whether the tag was suppressed or unsuppressed from the UI.  # noqa: E501

        :return: The manual_suppress of this AssertionTags.  # noqa: E501
        :rtype: int
        """
        return self._manual_suppress

    @manual_suppress.setter
    def manual_suppress(self, manual_suppress):
        """Sets the manual_suppress of this AssertionTags.

        Indication of whether the tag was suppressed or unsuppressed from the UI.  # noqa: E501

        :param manual_suppress: The manual_suppress of this AssertionTags.  # noqa: E501
        :type: int
        """

        self._manual_suppress = manual_suppress

    @property
    def transcript(self):
        """Gets the transcript of this AssertionTags.  # noqa: E501

        The particular transcript for a mutation tag.  # noqa: E501

        :return: The transcript of this AssertionTags.  # noqa: E501
        :rtype: str
        """
        return self._transcript

    @transcript.setter
    def transcript(self, transcript):
        """Sets the transcript of this AssertionTags.

        The particular transcript for a mutation tag.  # noqa: E501

        :param transcript: The transcript of this AssertionTags.  # noqa: E501
        :type: str
        """

        self._transcript = transcript

    @property
    def primary(self):
        """Gets the primary of this AssertionTags.  # noqa: E501

        Indicates a primary condition.  # noqa: E501

        :return: The primary of this AssertionTags.  # noqa: E501
        :rtype: bool
        """
        return self._primary

    @primary.setter
    def primary(self, primary):
        """Sets the primary of this AssertionTags.

        Indicates a primary condition.  # noqa: E501

        :param primary: The primary of this AssertionTags.  # noqa: E501
        :type: bool
        """

        self._primary = primary

    @property
    def valid(self):
        """Gets the valid of this AssertionTags.  # noqa: E501


        :return: The valid of this AssertionTags.  # noqa: E501
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this AssertionTags.


        :param valid: The valid of this AssertionTags.  # noqa: E501
        :type: bool
        """

        self._valid = valid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssertionTags, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssertionTags):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
