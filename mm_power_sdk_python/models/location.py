# coding: utf-8

"""
    MolecularMatch MMPower

    MMPower API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@molecularmatch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Location(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'site': 'Site',
        'status': 'str',
        'contact': 'Contact',
        'contact_backup': 'Contact',
        'investigator': 'list[Investigator]'
    }

    attribute_map = {
        'site': 'site',
        'status': 'status',
        'contact': 'contact',
        'contact_backup': 'contact_backup',
        'investigator': 'investigator'
    }

    def __init__(self, site=None, status=None, contact=None, contact_backup=None, investigator=None):  # noqa: E501
        """Location - a model defined in Swagger"""  # noqa: E501
        self._site = None
        self._status = None
        self._contact = None
        self._contact_backup = None
        self._investigator = None
        self.discriminator = None
        if site is not None:
            self.site = site
        self.status = status
        if contact is not None:
            self.contact = contact
        if contact_backup is not None:
            self.contact_backup = contact_backup
        if investigator is not None:
            self.investigator = investigator

    @property
    def site(self):
        """Gets the site of this Location.  # noqa: E501


        :return: The site of this Location.  # noqa: E501
        :rtype: Site
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this Location.


        :param site: The site of this Location.  # noqa: E501
        :type: Site
        """

        self._site = site

    @property
    def status(self):
        """Gets the status of this Location.  # noqa: E501

        Trial site recruiting status.  # noqa: E501

        :return: The status of this Location.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Location.

        Trial site recruiting status.  # noqa: E501

        :param status: The status of this Location.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["Active, not recruiting", "Approved for marketing", "Available", "Completed", "Enrolling by invitation", "No longer available", "Not yet recruiting", "Recruiting", "Suspended", "Temporarily not available", "Terminated", "Withdrawn", "Withheld", "Unknown status"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def contact(self):
        """Gets the contact of this Location.  # noqa: E501


        :return: The contact of this Location.  # noqa: E501
        :rtype: Contact
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this Location.


        :param contact: The contact of this Location.  # noqa: E501
        :type: Contact
        """

        self._contact = contact

    @property
    def contact_backup(self):
        """Gets the contact_backup of this Location.  # noqa: E501


        :return: The contact_backup of this Location.  # noqa: E501
        :rtype: Contact
        """
        return self._contact_backup

    @contact_backup.setter
    def contact_backup(self, contact_backup):
        """Sets the contact_backup of this Location.


        :param contact_backup: The contact_backup of this Location.  # noqa: E501
        :type: Contact
        """

        self._contact_backup = contact_backup

    @property
    def investigator(self):
        """Gets the investigator of this Location.  # noqa: E501

        Person(s) responsible for the overall scientific leadership of the protocol, including study principal investigator.  # noqa: E501

        :return: The investigator of this Location.  # noqa: E501
        :rtype: list[Investigator]
        """
        return self._investigator

    @investigator.setter
    def investigator(self, investigator):
        """Sets the investigator of this Location.

        Person(s) responsible for the overall scientific leadership of the protocol, including study principal investigator.  # noqa: E501

        :param investigator: The investigator of this Location.  # noqa: E501
        :type: list[Investigator]
        """

        self._investigator = investigator

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Location, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Location):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
