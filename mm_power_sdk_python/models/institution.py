# coding: utf-8

"""
    MolecularMatch MMPower

    MMPower API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@molecularmatch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Institution(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'country': 'str',
        'address': 'str',
        'sub_division': 'str',
        'city': 'str',
        'postal_code': 'str',
        'idn': 'str',
        'synonyms': 'list[str]',
        'status': 'str',
        'test': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'country': 'country',
        'address': 'address',
        'sub_division': 'subDivision',
        'city': 'city',
        'postal_code': 'postalCode',
        'idn': 'idn',
        'synonyms': 'synonyms',
        'status': 'status',
        'test': 'test'
    }

    def __init__(self, id=None, name=None, country=None, address=None, sub_division=None, city=None, postal_code=None, idn=None, synonyms=None, status=None, test=None):  # noqa: E501
        """Institution - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._country = None
        self._address = None
        self._sub_division = None
        self._city = None
        self._postal_code = None
        self._idn = None
        self._synonyms = None
        self._status = None
        self._test = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.name = name
        self.country = country
        if address is not None:
            self.address = address
        if sub_division is not None:
            self.sub_division = sub_division
        if city is not None:
            self.city = city
        self.postal_code = postal_code
        if idn is not None:
            self.idn = idn
        if synonyms is not None:
            self.synonyms = synonyms
        if status is not None:
            self.status = status
        if test is not None:
            self.test = test

    @property
    def id(self):
        """Gets the id of this Institution.  # noqa: E501

        unique identifier.  # noqa: E501

        :return: The id of this Institution.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Institution.

        unique identifier.  # noqa: E501

        :param id: The id of this Institution.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Institution.  # noqa: E501

        The name of the institution.  # noqa: E501

        :return: The name of this Institution.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Institution.

        The name of the institution.  # noqa: E501

        :param name: The name of this Institution.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def country(self):
        """Gets the country of this Institution.  # noqa: E501

        The ISO-3166 2 character country code where the institution is located.  # noqa: E501

        :return: The country of this Institution.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Institution.

        The ISO-3166 2 character country code where the institution is located.  # noqa: E501

        :param country: The country of this Institution.  # noqa: E501
        :type: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")  # noqa: E501

        self._country = country

    @property
    def address(self):
        """Gets the address of this Institution.  # noqa: E501

        Number and street portion of the address of the institution.  # noqa: E501

        :return: The address of this Institution.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Institution.

        Number and street portion of the address of the institution.  # noqa: E501

        :param address: The address of this Institution.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def sub_division(self):
        """Gets the sub_division of this Institution.  # noqa: E501

        State/Province portion of the address of the institution.  # noqa: E501

        :return: The sub_division of this Institution.  # noqa: E501
        :rtype: str
        """
        return self._sub_division

    @sub_division.setter
    def sub_division(self, sub_division):
        """Sets the sub_division of this Institution.

        State/Province portion of the address of the institution.  # noqa: E501

        :param sub_division: The sub_division of this Institution.  # noqa: E501
        :type: str
        """

        self._sub_division = sub_division

    @property
    def city(self):
        """Gets the city of this Institution.  # noqa: E501

        City portion of the address of the institution.  # noqa: E501

        :return: The city of this Institution.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Institution.

        City portion of the address of the institution.  # noqa: E501

        :param city: The city of this Institution.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def postal_code(self):
        """Gets the postal_code of this Institution.  # noqa: E501

        Postal code portion of the address of the institution.  # noqa: E501

        :return: The postal_code of this Institution.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Institution.

        Postal code portion of the address of the institution.  # noqa: E501

        :param postal_code: The postal_code of this Institution.  # noqa: E501
        :type: str
        """
        if postal_code is None:
            raise ValueError("Invalid value for `postal_code`, must not be `None`")  # noqa: E501

        self._postal_code = postal_code

    @property
    def idn(self):
        """Gets the idn of this Institution.  # noqa: E501

        The Integrated Delivery Network (IDN) for this institution.  Provide an id of another institution that is recognized by MoleculatMatch.  # noqa: E501

        :return: The idn of this Institution.  # noqa: E501
        :rtype: str
        """
        return self._idn

    @idn.setter
    def idn(self, idn):
        """Sets the idn of this Institution.

        The Integrated Delivery Network (IDN) for this institution.  Provide an id of another institution that is recognized by MoleculatMatch.  # noqa: E501

        :param idn: The idn of this Institution.  # noqa: E501
        :type: str
        """

        self._idn = idn

    @property
    def synonyms(self):
        """Gets the synonyms of this Institution.  # noqa: E501

        Alternative names the institution is referred by.  # noqa: E501

        :return: The synonyms of this Institution.  # noqa: E501
        :rtype: list[str]
        """
        return self._synonyms

    @synonyms.setter
    def synonyms(self, synonyms):
        """Sets the synonyms of this Institution.

        Alternative names the institution is referred by.  # noqa: E501

        :param synonyms: The synonyms of this Institution.  # noqa: E501
        :type: list[str]
        """

        self._synonyms = synonyms

    @property
    def status(self):
        """Gets the status of this Institution.  # noqa: E501

        Indication of its level of readiness and incorporation into the MolecularMatch Knowledge base.  # noqa: E501

        :return: The status of this Institution.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Institution.

        Indication of its level of readiness and incorporation into the MolecularMatch Knowledge base.  # noqa: E501

        :param status: The status of this Institution.  # noqa: E501
        :type: str
        """
        allowed_values = ["received", "in-process", "registered"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def test(self):
        """Gets the test of this Institution.  # noqa: E501

        A flag to mark test institutions.  # noqa: E501

        :return: The test of this Institution.  # noqa: E501
        :rtype: bool
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this Institution.

        A flag to mark test institutions.  # noqa: E501

        :param test: The test of this Institution.  # noqa: E501
        :type: bool
        """

        self._test = test

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Institution, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Institution):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
