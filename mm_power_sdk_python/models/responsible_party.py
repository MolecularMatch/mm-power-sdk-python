# coding: utf-8

"""
    MolecularMatch MMPower

    MMPower API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@molecularmatch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ResponsibleParty(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name_title': 'str',
        'organization': 'str',
        'responsible_party_type': 'str',
        'investigator_affiliation': 'str',
        'investigator_full_name': 'str',
        'investigator_title': 'str'
    }

    attribute_map = {
        'name_title': 'name_title',
        'organization': 'organization',
        'responsible_party_type': 'responsible_party_type',
        'investigator_affiliation': 'investigator_affiliation',
        'investigator_full_name': 'investigator_full_name',
        'investigator_title': 'investigator_title'
    }

    def __init__(self, name_title=None, organization=None, responsible_party_type='Principal Investigator', investigator_affiliation=None, investigator_full_name=None, investigator_title=None):  # noqa: E501
        """ResponsibleParty - a model defined in Swagger"""  # noqa: E501
        self._name_title = None
        self._organization = None
        self._responsible_party_type = None
        self._investigator_affiliation = None
        self._investigator_full_name = None
        self._investigator_title = None
        self.discriminator = None
        if name_title is not None:
            self.name_title = name_title
        if organization is not None:
            self.organization = organization
        if responsible_party_type is not None:
            self.responsible_party_type = responsible_party_type
        if investigator_affiliation is not None:
            self.investigator_affiliation = investigator_affiliation
        if investigator_full_name is not None:
            self.investigator_full_name = investigator_full_name
        if investigator_title is not None:
            self.investigator_title = investigator_title

    @property
    def name_title(self):
        """Gets the name_title of this ResponsibleParty.  # noqa: E501


        :return: The name_title of this ResponsibleParty.  # noqa: E501
        :rtype: str
        """
        return self._name_title

    @name_title.setter
    def name_title(self, name_title):
        """Sets the name_title of this ResponsibleParty.


        :param name_title: The name_title of this ResponsibleParty.  # noqa: E501
        :type: str
        """

        self._name_title = name_title

    @property
    def organization(self):
        """Gets the organization of this ResponsibleParty.  # noqa: E501


        :return: The organization of this ResponsibleParty.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this ResponsibleParty.


        :param organization: The organization of this ResponsibleParty.  # noqa: E501
        :type: str
        """

        self._organization = organization

    @property
    def responsible_party_type(self):
        """Gets the responsible_party_type of this ResponsibleParty.  # noqa: E501


        :return: The responsible_party_type of this ResponsibleParty.  # noqa: E501
        :rtype: str
        """
        return self._responsible_party_type

    @responsible_party_type.setter
    def responsible_party_type(self, responsible_party_type):
        """Sets the responsible_party_type of this ResponsibleParty.


        :param responsible_party_type: The responsible_party_type of this ResponsibleParty.  # noqa: E501
        :type: str
        """
        allowed_values = ["Sponsor", "Principal Investigator", "Sponsor-Investigator"]  # noqa: E501
        if responsible_party_type not in allowed_values:
            raise ValueError(
                "Invalid value for `responsible_party_type` ({0}), must be one of {1}"  # noqa: E501
                .format(responsible_party_type, allowed_values)
            )

        self._responsible_party_type = responsible_party_type

    @property
    def investigator_affiliation(self):
        """Gets the investigator_affiliation of this ResponsibleParty.  # noqa: E501


        :return: The investigator_affiliation of this ResponsibleParty.  # noqa: E501
        :rtype: str
        """
        return self._investigator_affiliation

    @investigator_affiliation.setter
    def investigator_affiliation(self, investigator_affiliation):
        """Sets the investigator_affiliation of this ResponsibleParty.


        :param investigator_affiliation: The investigator_affiliation of this ResponsibleParty.  # noqa: E501
        :type: str
        """

        self._investigator_affiliation = investigator_affiliation

    @property
    def investigator_full_name(self):
        """Gets the investigator_full_name of this ResponsibleParty.  # noqa: E501


        :return: The investigator_full_name of this ResponsibleParty.  # noqa: E501
        :rtype: str
        """
        return self._investigator_full_name

    @investigator_full_name.setter
    def investigator_full_name(self, investigator_full_name):
        """Sets the investigator_full_name of this ResponsibleParty.


        :param investigator_full_name: The investigator_full_name of this ResponsibleParty.  # noqa: E501
        :type: str
        """

        self._investigator_full_name = investigator_full_name

    @property
    def investigator_title(self):
        """Gets the investigator_title of this ResponsibleParty.  # noqa: E501


        :return: The investigator_title of this ResponsibleParty.  # noqa: E501
        :rtype: str
        """
        return self._investigator_title

    @investigator_title.setter
    def investigator_title(self, investigator_title):
        """Sets the investigator_title of this ResponsibleParty.


        :param investigator_title: The investigator_title of this ResponsibleParty.  # noqa: E501
        :type: str
        """

        self._investigator_title = investigator_title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResponsibleParty, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponsibleParty):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
