# coding: utf-8

"""
    MolecularMatch MMPower

    MMPower API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@molecularmatch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from mm_power_sdk_python.models.drug_availability import DrugAvailability  # noqa: F401,E501
from mm_power_sdk_python.models.drug_brands import DrugBrands  # noqa: F401,E501
from mm_power_sdk_python.models.drug_composite_tags import DrugCompositeTags  # noqa: F401,E501
from mm_power_sdk_python.models.drug_dosages import DrugDosages  # noqa: F401,E501
from mm_power_sdk_python.models.drug_drugclass import DrugDrugclass  # noqa: F401,E501
from mm_power_sdk_python.models.drug_external_ids import DrugExternalIds  # noqa: F401,E501
from mm_power_sdk_python.models.drug_parents import DrugParents  # noqa: F401,E501
from mm_power_sdk_python.models.drug_pharmacology import DrugPharmacology  # noqa: F401,E501
from mm_power_sdk_python.models.drug_prices import DrugPrices  # noqa: F401,E501
from mm_power_sdk_python.models.drug_synonyms import DrugSynonyms  # noqa: F401,E501
from mm_power_sdk_python.models.object import Object  # noqa: F401,E501


class SearchResponseDrugRows(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mboost': 'float',
        'analyzer': 'str',
        'id': 'str',
        'source': 'str',
        'name': 'str',
        'name_lower': 'str',
        'alias': 'str',
        'exclude': 'bool',
        'custom': 'bool',
        'description': 'str',
        'composite': 'bool',
        'suppress_resistance': 'bool',
        'approved': 'bool',
        'availability': 'list[DrugAvailability]',
        'synonyms': 'list[DrugSynonyms]',
        'parents': 'list[DrugParents]',
        'drugclass': 'list[DrugDrugclass]',
        'composite_tags': 'list[DrugCompositeTags]',
        'brands': 'list[DrugBrands]',
        'indication_text': 'str',
        'contraindication_text': 'str',
        'mechanism_text': 'str',
        'rxcui': 'list[str]',
        'external_ids': 'list[DrugExternalIds]',
        'link': 'str',
        'prices': 'list[DrugPrices]',
        'dosages': 'list[DrugDosages]',
        'pharmacology': 'DrugPharmacology',
        'phase_and_trials_score': 'float',
        'valid': 'Object',
        'valid_message': 'str'
    }

    attribute_map = {
        'mboost': 'mboost',
        'analyzer': 'analyzer',
        'id': 'id',
        'source': 'source',
        'name': 'name',
        'name_lower': 'name_lower',
        'alias': 'alias',
        'exclude': 'exclude',
        'custom': 'custom',
        'description': 'description',
        'composite': 'composite',
        'suppress_resistance': 'suppressResistance',
        'approved': 'approved',
        'availability': 'availability',
        'synonyms': 'synonyms',
        'parents': 'parents',
        'drugclass': 'drugclass',
        'composite_tags': 'compositeTags',
        'brands': 'brands',
        'indication_text': 'indicationText',
        'contraindication_text': 'contraindicationText',
        'mechanism_text': 'mechanismText',
        'rxcui': 'rxcui',
        'external_ids': 'externalIds',
        'link': 'link',
        'prices': 'prices',
        'dosages': 'dosages',
        'pharmacology': 'pharmacology',
        'phase_and_trials_score': 'phaseAndTrialsScore',
        'valid': '_valid',
        'valid_message': '_validMessage'
    }

    def __init__(self, mboost=None, analyzer='DEFAULT', id=None, source=None, name=None, name_lower=None, alias=None, exclude=None, custom=None, description=None, composite=None, suppress_resistance=None, approved=None, availability=None, synonyms=None, parents=None, drugclass=None, composite_tags=None, brands=None, indication_text=None, contraindication_text=None, mechanism_text=None, rxcui=None, external_ids=None, link=None, prices=None, dosages=None, pharmacology=None, phase_and_trials_score=None, valid=None, valid_message=None):  # noqa: E501
        """SearchResponseDrugRows - a model defined in Swagger"""  # noqa: E501
        self._mboost = None
        self._analyzer = None
        self._id = None
        self._source = None
        self._name = None
        self._name_lower = None
        self._alias = None
        self._exclude = None
        self._custom = None
        self._description = None
        self._composite = None
        self._suppress_resistance = None
        self._approved = None
        self._availability = None
        self._synonyms = None
        self._parents = None
        self._drugclass = None
        self._composite_tags = None
        self._brands = None
        self._indication_text = None
        self._contraindication_text = None
        self._mechanism_text = None
        self._rxcui = None
        self._external_ids = None
        self._link = None
        self._prices = None
        self._dosages = None
        self._pharmacology = None
        self._phase_and_trials_score = None
        self._valid = None
        self._valid_message = None
        self.discriminator = None
        if mboost is not None:
            self.mboost = mboost
        if analyzer is not None:
            self.analyzer = analyzer
        self.id = id
        self.source = source
        self.name = name
        self.name_lower = name_lower
        if alias is not None:
            self.alias = alias
        if exclude is not None:
            self.exclude = exclude
        if custom is not None:
            self.custom = custom
        if description is not None:
            self.description = description
        if composite is not None:
            self.composite = composite
        if suppress_resistance is not None:
            self.suppress_resistance = suppress_resistance
        self.approved = approved
        if availability is not None:
            self.availability = availability
        if synonyms is not None:
            self.synonyms = synonyms
        if parents is not None:
            self.parents = parents
        if drugclass is not None:
            self.drugclass = drugclass
        if composite_tags is not None:
            self.composite_tags = composite_tags
        if brands is not None:
            self.brands = brands
        if indication_text is not None:
            self.indication_text = indication_text
        if contraindication_text is not None:
            self.contraindication_text = contraindication_text
        if mechanism_text is not None:
            self.mechanism_text = mechanism_text
        if rxcui is not None:
            self.rxcui = rxcui
        if external_ids is not None:
            self.external_ids = external_ids
        if link is not None:
            self.link = link
        if prices is not None:
            self.prices = prices
        if dosages is not None:
            self.dosages = dosages
        if pharmacology is not None:
            self.pharmacology = pharmacology
        if phase_and_trials_score is not None:
            self.phase_and_trials_score = phase_and_trials_score
        if valid is not None:
            self.valid = valid
        if valid_message is not None:
            self.valid_message = valid_message

    @property
    def mboost(self):
        """Gets the mboost of this SearchResponseDrugRows.  # noqa: E501


        :return: The mboost of this SearchResponseDrugRows.  # noqa: E501
        :rtype: float
        """
        return self._mboost

    @mboost.setter
    def mboost(self, mboost):
        """Sets the mboost of this SearchResponseDrugRows.


        :param mboost: The mboost of this SearchResponseDrugRows.  # noqa: E501
        :type: float
        """

        self._mboost = mboost

    @property
    def analyzer(self):
        """Gets the analyzer of this SearchResponseDrugRows.  # noqa: E501


        :return: The analyzer of this SearchResponseDrugRows.  # noqa: E501
        :rtype: str
        """
        return self._analyzer

    @analyzer.setter
    def analyzer(self, analyzer):
        """Sets the analyzer of this SearchResponseDrugRows.


        :param analyzer: The analyzer of this SearchResponseDrugRows.  # noqa: E501
        :type: str
        """
        allowed_values = ["DEFAULT", "CASE_SENSITIVE"]  # noqa: E501
        if analyzer not in allowed_values:
            raise ValueError(
                "Invalid value for `analyzer` ({0}), must be one of {1}"  # noqa: E501
                .format(analyzer, allowed_values)
            )

        self._analyzer = analyzer

    @property
    def id(self):
        """Gets the id of this SearchResponseDrugRows.  # noqa: E501


        :return: The id of this SearchResponseDrugRows.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SearchResponseDrugRows.


        :param id: The id of this SearchResponseDrugRows.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def source(self):
        """Gets the source of this SearchResponseDrugRows.  # noqa: E501


        :return: The source of this SearchResponseDrugRows.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this SearchResponseDrugRows.


        :param source: The source of this SearchResponseDrugRows.  # noqa: E501
        :type: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def name(self):
        """Gets the name of this SearchResponseDrugRows.  # noqa: E501


        :return: The name of this SearchResponseDrugRows.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SearchResponseDrugRows.


        :param name: The name of this SearchResponseDrugRows.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def name_lower(self):
        """Gets the name_lower of this SearchResponseDrugRows.  # noqa: E501


        :return: The name_lower of this SearchResponseDrugRows.  # noqa: E501
        :rtype: str
        """
        return self._name_lower

    @name_lower.setter
    def name_lower(self, name_lower):
        """Sets the name_lower of this SearchResponseDrugRows.


        :param name_lower: The name_lower of this SearchResponseDrugRows.  # noqa: E501
        :type: str
        """
        if name_lower is None:
            raise ValueError("Invalid value for `name_lower`, must not be `None`")  # noqa: E501

        self._name_lower = name_lower

    @property
    def alias(self):
        """Gets the alias of this SearchResponseDrugRows.  # noqa: E501


        :return: The alias of this SearchResponseDrugRows.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this SearchResponseDrugRows.


        :param alias: The alias of this SearchResponseDrugRows.  # noqa: E501
        :type: str
        """

        self._alias = alias

    @property
    def exclude(self):
        """Gets the exclude of this SearchResponseDrugRows.  # noqa: E501


        :return: The exclude of this SearchResponseDrugRows.  # noqa: E501
        :rtype: bool
        """
        return self._exclude

    @exclude.setter
    def exclude(self, exclude):
        """Sets the exclude of this SearchResponseDrugRows.


        :param exclude: The exclude of this SearchResponseDrugRows.  # noqa: E501
        :type: bool
        """

        self._exclude = exclude

    @property
    def custom(self):
        """Gets the custom of this SearchResponseDrugRows.  # noqa: E501


        :return: The custom of this SearchResponseDrugRows.  # noqa: E501
        :rtype: bool
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """Sets the custom of this SearchResponseDrugRows.


        :param custom: The custom of this SearchResponseDrugRows.  # noqa: E501
        :type: bool
        """

        self._custom = custom

    @property
    def description(self):
        """Gets the description of this SearchResponseDrugRows.  # noqa: E501


        :return: The description of this SearchResponseDrugRows.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SearchResponseDrugRows.


        :param description: The description of this SearchResponseDrugRows.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def composite(self):
        """Gets the composite of this SearchResponseDrugRows.  # noqa: E501


        :return: The composite of this SearchResponseDrugRows.  # noqa: E501
        :rtype: bool
        """
        return self._composite

    @composite.setter
    def composite(self, composite):
        """Sets the composite of this SearchResponseDrugRows.


        :param composite: The composite of this SearchResponseDrugRows.  # noqa: E501
        :type: bool
        """

        self._composite = composite

    @property
    def suppress_resistance(self):
        """Gets the suppress_resistance of this SearchResponseDrugRows.  # noqa: E501


        :return: The suppress_resistance of this SearchResponseDrugRows.  # noqa: E501
        :rtype: bool
        """
        return self._suppress_resistance

    @suppress_resistance.setter
    def suppress_resistance(self, suppress_resistance):
        """Sets the suppress_resistance of this SearchResponseDrugRows.


        :param suppress_resistance: The suppress_resistance of this SearchResponseDrugRows.  # noqa: E501
        :type: bool
        """

        self._suppress_resistance = suppress_resistance

    @property
    def approved(self):
        """Gets the approved of this SearchResponseDrugRows.  # noqa: E501


        :return: The approved of this SearchResponseDrugRows.  # noqa: E501
        :rtype: bool
        """
        return self._approved

    @approved.setter
    def approved(self, approved):
        """Sets the approved of this SearchResponseDrugRows.


        :param approved: The approved of this SearchResponseDrugRows.  # noqa: E501
        :type: bool
        """
        if approved is None:
            raise ValueError("Invalid value for `approved`, must not be `None`")  # noqa: E501

        self._approved = approved

    @property
    def availability(self):
        """Gets the availability of this SearchResponseDrugRows.  # noqa: E501


        :return: The availability of this SearchResponseDrugRows.  # noqa: E501
        :rtype: list[DrugAvailability]
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this SearchResponseDrugRows.


        :param availability: The availability of this SearchResponseDrugRows.  # noqa: E501
        :type: list[DrugAvailability]
        """

        self._availability = availability

    @property
    def synonyms(self):
        """Gets the synonyms of this SearchResponseDrugRows.  # noqa: E501


        :return: The synonyms of this SearchResponseDrugRows.  # noqa: E501
        :rtype: list[DrugSynonyms]
        """
        return self._synonyms

    @synonyms.setter
    def synonyms(self, synonyms):
        """Sets the synonyms of this SearchResponseDrugRows.


        :param synonyms: The synonyms of this SearchResponseDrugRows.  # noqa: E501
        :type: list[DrugSynonyms]
        """

        self._synonyms = synonyms

    @property
    def parents(self):
        """Gets the parents of this SearchResponseDrugRows.  # noqa: E501


        :return: The parents of this SearchResponseDrugRows.  # noqa: E501
        :rtype: list[DrugParents]
        """
        return self._parents

    @parents.setter
    def parents(self, parents):
        """Sets the parents of this SearchResponseDrugRows.


        :param parents: The parents of this SearchResponseDrugRows.  # noqa: E501
        :type: list[DrugParents]
        """

        self._parents = parents

    @property
    def drugclass(self):
        """Gets the drugclass of this SearchResponseDrugRows.  # noqa: E501


        :return: The drugclass of this SearchResponseDrugRows.  # noqa: E501
        :rtype: list[DrugDrugclass]
        """
        return self._drugclass

    @drugclass.setter
    def drugclass(self, drugclass):
        """Sets the drugclass of this SearchResponseDrugRows.


        :param drugclass: The drugclass of this SearchResponseDrugRows.  # noqa: E501
        :type: list[DrugDrugclass]
        """

        self._drugclass = drugclass

    @property
    def composite_tags(self):
        """Gets the composite_tags of this SearchResponseDrugRows.  # noqa: E501


        :return: The composite_tags of this SearchResponseDrugRows.  # noqa: E501
        :rtype: list[DrugCompositeTags]
        """
        return self._composite_tags

    @composite_tags.setter
    def composite_tags(self, composite_tags):
        """Sets the composite_tags of this SearchResponseDrugRows.


        :param composite_tags: The composite_tags of this SearchResponseDrugRows.  # noqa: E501
        :type: list[DrugCompositeTags]
        """

        self._composite_tags = composite_tags

    @property
    def brands(self):
        """Gets the brands of this SearchResponseDrugRows.  # noqa: E501


        :return: The brands of this SearchResponseDrugRows.  # noqa: E501
        :rtype: list[DrugBrands]
        """
        return self._brands

    @brands.setter
    def brands(self, brands):
        """Sets the brands of this SearchResponseDrugRows.


        :param brands: The brands of this SearchResponseDrugRows.  # noqa: E501
        :type: list[DrugBrands]
        """

        self._brands = brands

    @property
    def indication_text(self):
        """Gets the indication_text of this SearchResponseDrugRows.  # noqa: E501


        :return: The indication_text of this SearchResponseDrugRows.  # noqa: E501
        :rtype: str
        """
        return self._indication_text

    @indication_text.setter
    def indication_text(self, indication_text):
        """Sets the indication_text of this SearchResponseDrugRows.


        :param indication_text: The indication_text of this SearchResponseDrugRows.  # noqa: E501
        :type: str
        """

        self._indication_text = indication_text

    @property
    def contraindication_text(self):
        """Gets the contraindication_text of this SearchResponseDrugRows.  # noqa: E501


        :return: The contraindication_text of this SearchResponseDrugRows.  # noqa: E501
        :rtype: str
        """
        return self._contraindication_text

    @contraindication_text.setter
    def contraindication_text(self, contraindication_text):
        """Sets the contraindication_text of this SearchResponseDrugRows.


        :param contraindication_text: The contraindication_text of this SearchResponseDrugRows.  # noqa: E501
        :type: str
        """

        self._contraindication_text = contraindication_text

    @property
    def mechanism_text(self):
        """Gets the mechanism_text of this SearchResponseDrugRows.  # noqa: E501


        :return: The mechanism_text of this SearchResponseDrugRows.  # noqa: E501
        :rtype: str
        """
        return self._mechanism_text

    @mechanism_text.setter
    def mechanism_text(self, mechanism_text):
        """Sets the mechanism_text of this SearchResponseDrugRows.


        :param mechanism_text: The mechanism_text of this SearchResponseDrugRows.  # noqa: E501
        :type: str
        """

        self._mechanism_text = mechanism_text

    @property
    def rxcui(self):
        """Gets the rxcui of this SearchResponseDrugRows.  # noqa: E501


        :return: The rxcui of this SearchResponseDrugRows.  # noqa: E501
        :rtype: list[str]
        """
        return self._rxcui

    @rxcui.setter
    def rxcui(self, rxcui):
        """Sets the rxcui of this SearchResponseDrugRows.


        :param rxcui: The rxcui of this SearchResponseDrugRows.  # noqa: E501
        :type: list[str]
        """

        self._rxcui = rxcui

    @property
    def external_ids(self):
        """Gets the external_ids of this SearchResponseDrugRows.  # noqa: E501


        :return: The external_ids of this SearchResponseDrugRows.  # noqa: E501
        :rtype: list[DrugExternalIds]
        """
        return self._external_ids

    @external_ids.setter
    def external_ids(self, external_ids):
        """Sets the external_ids of this SearchResponseDrugRows.


        :param external_ids: The external_ids of this SearchResponseDrugRows.  # noqa: E501
        :type: list[DrugExternalIds]
        """

        self._external_ids = external_ids

    @property
    def link(self):
        """Gets the link of this SearchResponseDrugRows.  # noqa: E501


        :return: The link of this SearchResponseDrugRows.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this SearchResponseDrugRows.


        :param link: The link of this SearchResponseDrugRows.  # noqa: E501
        :type: str
        """

        self._link = link

    @property
    def prices(self):
        """Gets the prices of this SearchResponseDrugRows.  # noqa: E501


        :return: The prices of this SearchResponseDrugRows.  # noqa: E501
        :rtype: list[DrugPrices]
        """
        return self._prices

    @prices.setter
    def prices(self, prices):
        """Sets the prices of this SearchResponseDrugRows.


        :param prices: The prices of this SearchResponseDrugRows.  # noqa: E501
        :type: list[DrugPrices]
        """

        self._prices = prices

    @property
    def dosages(self):
        """Gets the dosages of this SearchResponseDrugRows.  # noqa: E501


        :return: The dosages of this SearchResponseDrugRows.  # noqa: E501
        :rtype: list[DrugDosages]
        """
        return self._dosages

    @dosages.setter
    def dosages(self, dosages):
        """Sets the dosages of this SearchResponseDrugRows.


        :param dosages: The dosages of this SearchResponseDrugRows.  # noqa: E501
        :type: list[DrugDosages]
        """

        self._dosages = dosages

    @property
    def pharmacology(self):
        """Gets the pharmacology of this SearchResponseDrugRows.  # noqa: E501


        :return: The pharmacology of this SearchResponseDrugRows.  # noqa: E501
        :rtype: DrugPharmacology
        """
        return self._pharmacology

    @pharmacology.setter
    def pharmacology(self, pharmacology):
        """Sets the pharmacology of this SearchResponseDrugRows.


        :param pharmacology: The pharmacology of this SearchResponseDrugRows.  # noqa: E501
        :type: DrugPharmacology
        """

        self._pharmacology = pharmacology

    @property
    def phase_and_trials_score(self):
        """Gets the phase_and_trials_score of this SearchResponseDrugRows.  # noqa: E501


        :return: The phase_and_trials_score of this SearchResponseDrugRows.  # noqa: E501
        :rtype: float
        """
        return self._phase_and_trials_score

    @phase_and_trials_score.setter
    def phase_and_trials_score(self, phase_and_trials_score):
        """Sets the phase_and_trials_score of this SearchResponseDrugRows.


        :param phase_and_trials_score: The phase_and_trials_score of this SearchResponseDrugRows.  # noqa: E501
        :type: float
        """

        self._phase_and_trials_score = phase_and_trials_score

    @property
    def valid(self):
        """Gets the valid of this SearchResponseDrugRows.  # noqa: E501


        :return: The valid of this SearchResponseDrugRows.  # noqa: E501
        :rtype: Object
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this SearchResponseDrugRows.


        :param valid: The valid of this SearchResponseDrugRows.  # noqa: E501
        :type: Object
        """

        self._valid = valid

    @property
    def valid_message(self):
        """Gets the valid_message of this SearchResponseDrugRows.  # noqa: E501


        :return: The valid_message of this SearchResponseDrugRows.  # noqa: E501
        :rtype: str
        """
        return self._valid_message

    @valid_message.setter
    def valid_message(self, valid_message):
        """Sets the valid_message of this SearchResponseDrugRows.


        :param valid_message: The valid_message of this SearchResponseDrugRows.  # noqa: E501
        :type: str
        """

        self._valid_message = valid_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchResponseDrugRows, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchResponseDrugRows):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
