# coding: utf-8

"""
    MolecularMatch MMPower

    MMPower API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@molecularmatch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class DrugBrands(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'primary': 'bool',
        'composite_key': 'str',
        'indications': 'str',
        'mechanism': 'str',
        'name': 'str',
        'manufacturer': 'str'
    }

    attribute_map = {
        'primary': 'primary',
        'composite_key': 'compositeKey',
        'indications': 'indications',
        'mechanism': 'mechanism',
        'name': 'name',
        'manufacturer': 'manufacturer'
    }

    def __init__(self, primary=None, composite_key=None, indications=None, mechanism=None, name=None, manufacturer=None):  # noqa: E501
        """DrugBrands - a model defined in Swagger"""  # noqa: E501
        self._primary = None
        self._composite_key = None
        self._indications = None
        self._mechanism = None
        self._name = None
        self._manufacturer = None
        self.discriminator = None
        if primary is not None:
            self.primary = primary
        self.composite_key = composite_key
        if indications is not None:
            self.indications = indications
        if mechanism is not None:
            self.mechanism = mechanism
        self.name = name
        self.manufacturer = manufacturer

    @property
    def primary(self):
        """Gets the primary of this DrugBrands.  # noqa: E501


        :return: The primary of this DrugBrands.  # noqa: E501
        :rtype: bool
        """
        return self._primary

    @primary.setter
    def primary(self, primary):
        """Sets the primary of this DrugBrands.


        :param primary: The primary of this DrugBrands.  # noqa: E501
        :type: bool
        """

        self._primary = primary

    @property
    def composite_key(self):
        """Gets the composite_key of this DrugBrands.  # noqa: E501


        :return: The composite_key of this DrugBrands.  # noqa: E501
        :rtype: str
        """
        return self._composite_key

    @composite_key.setter
    def composite_key(self, composite_key):
        """Sets the composite_key of this DrugBrands.


        :param composite_key: The composite_key of this DrugBrands.  # noqa: E501
        :type: str
        """
        if composite_key is None:
            raise ValueError("Invalid value for `composite_key`, must not be `None`")  # noqa: E501

        self._composite_key = composite_key

    @property
    def indications(self):
        """Gets the indications of this DrugBrands.  # noqa: E501


        :return: The indications of this DrugBrands.  # noqa: E501
        :rtype: str
        """
        return self._indications

    @indications.setter
    def indications(self, indications):
        """Sets the indications of this DrugBrands.


        :param indications: The indications of this DrugBrands.  # noqa: E501
        :type: str
        """

        self._indications = indications

    @property
    def mechanism(self):
        """Gets the mechanism of this DrugBrands.  # noqa: E501


        :return: The mechanism of this DrugBrands.  # noqa: E501
        :rtype: str
        """
        return self._mechanism

    @mechanism.setter
    def mechanism(self, mechanism):
        """Sets the mechanism of this DrugBrands.


        :param mechanism: The mechanism of this DrugBrands.  # noqa: E501
        :type: str
        """

        self._mechanism = mechanism

    @property
    def name(self):
        """Gets the name of this DrugBrands.  # noqa: E501


        :return: The name of this DrugBrands.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DrugBrands.


        :param name: The name of this DrugBrands.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def manufacturer(self):
        """Gets the manufacturer of this DrugBrands.  # noqa: E501


        :return: The manufacturer of this DrugBrands.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this DrugBrands.


        :param manufacturer: The manufacturer of this DrugBrands.  # noqa: E501
        :type: str
        """
        if manufacturer is None:
            raise ValueError("Invalid value for `manufacturer`, must not be `None`")  # noqa: E501

        self._manufacturer = manufacturer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DrugBrands, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DrugBrands):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
