# coding: utf-8

"""
    MolecularMatch MMPower

    MMPower API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@molecularmatch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class VariantInfoFusions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'chr': 'str',
        'exon_number': 'str',
        'intron_number': 'str',
        'lbpwlep': 'int',
        'lbpwrep': 'int',
        'rbpwlep': 'int',
        'rbpwrep': 'int',
        'reference_genome': 'str'
    }

    attribute_map = {
        'chr': 'chr',
        'exon_number': 'exonNumber',
        'intron_number': 'intronNumber',
        'lbpwlep': 'LBPWLEP',
        'lbpwrep': 'LBPWREP',
        'rbpwlep': 'RBPWLEP',
        'rbpwrep': 'RBPWREP',
        'reference_genome': 'referenceGenome'
    }

    def __init__(self, chr=None, exon_number=None, intron_number=None, lbpwlep=None, lbpwrep=None, rbpwlep=None, rbpwrep=None, reference_genome=None):  # noqa: E501
        """VariantInfoFusions - a model defined in Swagger"""  # noqa: E501
        self._chr = None
        self._exon_number = None
        self._intron_number = None
        self._lbpwlep = None
        self._lbpwrep = None
        self._rbpwlep = None
        self._rbpwrep = None
        self._reference_genome = None
        self.discriminator = None
        if chr is not None:
            self.chr = chr
        if exon_number is not None:
            self.exon_number = exon_number
        if intron_number is not None:
            self.intron_number = intron_number
        if lbpwlep is not None:
            self.lbpwlep = lbpwlep
        if lbpwrep is not None:
            self.lbpwrep = lbpwrep
        if rbpwlep is not None:
            self.rbpwlep = rbpwlep
        if rbpwrep is not None:
            self.rbpwrep = rbpwrep
        if reference_genome is not None:
            self.reference_genome = reference_genome

    @property
    def chr(self):
        """Gets the chr of this VariantInfoFusions.  # noqa: E501


        :return: The chr of this VariantInfoFusions.  # noqa: E501
        :rtype: str
        """
        return self._chr

    @chr.setter
    def chr(self, chr):
        """Sets the chr of this VariantInfoFusions.


        :param chr: The chr of this VariantInfoFusions.  # noqa: E501
        :type: str
        """

        self._chr = chr

    @property
    def exon_number(self):
        """Gets the exon_number of this VariantInfoFusions.  # noqa: E501


        :return: The exon_number of this VariantInfoFusions.  # noqa: E501
        :rtype: str
        """
        return self._exon_number

    @exon_number.setter
    def exon_number(self, exon_number):
        """Sets the exon_number of this VariantInfoFusions.


        :param exon_number: The exon_number of this VariantInfoFusions.  # noqa: E501
        :type: str
        """

        self._exon_number = exon_number

    @property
    def intron_number(self):
        """Gets the intron_number of this VariantInfoFusions.  # noqa: E501


        :return: The intron_number of this VariantInfoFusions.  # noqa: E501
        :rtype: str
        """
        return self._intron_number

    @intron_number.setter
    def intron_number(self, intron_number):
        """Sets the intron_number of this VariantInfoFusions.


        :param intron_number: The intron_number of this VariantInfoFusions.  # noqa: E501
        :type: str
        """

        self._intron_number = intron_number

    @property
    def lbpwlep(self):
        """Gets the lbpwlep of this VariantInfoFusions.  # noqa: E501


        :return: The lbpwlep of this VariantInfoFusions.  # noqa: E501
        :rtype: int
        """
        return self._lbpwlep

    @lbpwlep.setter
    def lbpwlep(self, lbpwlep):
        """Sets the lbpwlep of this VariantInfoFusions.


        :param lbpwlep: The lbpwlep of this VariantInfoFusions.  # noqa: E501
        :type: int
        """

        self._lbpwlep = lbpwlep

    @property
    def lbpwrep(self):
        """Gets the lbpwrep of this VariantInfoFusions.  # noqa: E501


        :return: The lbpwrep of this VariantInfoFusions.  # noqa: E501
        :rtype: int
        """
        return self._lbpwrep

    @lbpwrep.setter
    def lbpwrep(self, lbpwrep):
        """Sets the lbpwrep of this VariantInfoFusions.


        :param lbpwrep: The lbpwrep of this VariantInfoFusions.  # noqa: E501
        :type: int
        """

        self._lbpwrep = lbpwrep

    @property
    def rbpwlep(self):
        """Gets the rbpwlep of this VariantInfoFusions.  # noqa: E501


        :return: The rbpwlep of this VariantInfoFusions.  # noqa: E501
        :rtype: int
        """
        return self._rbpwlep

    @rbpwlep.setter
    def rbpwlep(self, rbpwlep):
        """Sets the rbpwlep of this VariantInfoFusions.


        :param rbpwlep: The rbpwlep of this VariantInfoFusions.  # noqa: E501
        :type: int
        """

        self._rbpwlep = rbpwlep

    @property
    def rbpwrep(self):
        """Gets the rbpwrep of this VariantInfoFusions.  # noqa: E501


        :return: The rbpwrep of this VariantInfoFusions.  # noqa: E501
        :rtype: int
        """
        return self._rbpwrep

    @rbpwrep.setter
    def rbpwrep(self, rbpwrep):
        """Sets the rbpwrep of this VariantInfoFusions.


        :param rbpwrep: The rbpwrep of this VariantInfoFusions.  # noqa: E501
        :type: int
        """

        self._rbpwrep = rbpwrep

    @property
    def reference_genome(self):
        """Gets the reference_genome of this VariantInfoFusions.  # noqa: E501


        :return: The reference_genome of this VariantInfoFusions.  # noqa: E501
        :rtype: str
        """
        return self._reference_genome

    @reference_genome.setter
    def reference_genome(self, reference_genome):
        """Sets the reference_genome of this VariantInfoFusions.


        :param reference_genome: The reference_genome of this VariantInfoFusions.  # noqa: E501
        :type: str
        """
        allowed_values = ["grch37_hg19", "grch38_hg38"]  # noqa: E501
        if reference_genome not in allowed_values:
            raise ValueError(
                "Invalid value for `reference_genome` ({0}), must be one of {1}"  # noqa: E501
                .format(reference_genome, allowed_values)
            )

        self._reference_genome = reference_genome

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VariantInfoFusions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VariantInfoFusions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
