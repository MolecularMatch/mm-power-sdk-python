# coding: utf-8

"""
    MolecularMatch MMPower

    MMPower API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@molecularmatch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Oversight(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'has_dmc': 'bool',
        'is_fda_regulated_drug': 'bool',
        'is_fda_regulated_device': 'bool',
        'is_unapproved_device': 'bool',
        'is_ppsd': 'bool',
        'is_us_export': 'bool'
    }

    attribute_map = {
        'has_dmc': 'has_dmc',
        'is_fda_regulated_drug': 'is_fda_regulated_drug',
        'is_fda_regulated_device': 'is_fda_regulated_device',
        'is_unapproved_device': 'is_unapproved_device',
        'is_ppsd': 'is_ppsd',
        'is_us_export': 'is_us_export'
    }

    def __init__(self, has_dmc=None, is_fda_regulated_drug=None, is_fda_regulated_device=None, is_unapproved_device=None, is_ppsd=None, is_us_export=None):  # noqa: E501
        """Oversight - a model defined in Swagger"""  # noqa: E501
        self._has_dmc = None
        self._is_fda_regulated_drug = None
        self._is_fda_regulated_device = None
        self._is_unapproved_device = None
        self._is_ppsd = None
        self._is_us_export = None
        self.discriminator = None
        if has_dmc is not None:
            self.has_dmc = has_dmc
        if is_fda_regulated_drug is not None:
            self.is_fda_regulated_drug = is_fda_regulated_drug
        if is_fda_regulated_device is not None:
            self.is_fda_regulated_device = is_fda_regulated_device
        if is_unapproved_device is not None:
            self.is_unapproved_device = is_unapproved_device
        if is_ppsd is not None:
            self.is_ppsd = is_ppsd
        if is_us_export is not None:
            self.is_us_export = is_us_export

    @property
    def has_dmc(self):
        """Gets the has_dmc of this Oversight.  # noqa: E501

        Indication that a clinical study has a data monitoring committee.  # noqa: E501

        :return: The has_dmc of this Oversight.  # noqa: E501
        :rtype: bool
        """
        return self._has_dmc

    @has_dmc.setter
    def has_dmc(self, has_dmc):
        """Sets the has_dmc of this Oversight.

        Indication that a clinical study has a data monitoring committee.  # noqa: E501

        :param has_dmc: The has_dmc of this Oversight.  # noqa: E501
        :type: bool
        """

        self._has_dmc = has_dmc

    @property
    def is_fda_regulated_drug(self):
        """Gets the is_fda_regulated_drug of this Oversight.  # noqa: E501

        Indication that a clinical study is studying a drug product (including a biological product) subject to section 505 of the Federal Food, Drug, and Cosmetic Act or to section 351 of the Public Health Service Act.  # noqa: E501

        :return: The is_fda_regulated_drug of this Oversight.  # noqa: E501
        :rtype: bool
        """
        return self._is_fda_regulated_drug

    @is_fda_regulated_drug.setter
    def is_fda_regulated_drug(self, is_fda_regulated_drug):
        """Sets the is_fda_regulated_drug of this Oversight.

        Indication that a clinical study is studying a drug product (including a biological product) subject to section 505 of the Federal Food, Drug, and Cosmetic Act or to section 351 of the Public Health Service Act.  # noqa: E501

        :param is_fda_regulated_drug: The is_fda_regulated_drug of this Oversight.  # noqa: E501
        :type: bool
        """

        self._is_fda_regulated_drug = is_fda_regulated_drug

    @property
    def is_fda_regulated_device(self):
        """Gets the is_fda_regulated_device of this Oversight.  # noqa: E501

        Indication that a clinical study is studying a device product subject to section 510(k), 515, or 520(m) of the Federal Food, Drug, and Cosmetic Act.  # noqa: E501

        :return: The is_fda_regulated_device of this Oversight.  # noqa: E501
        :rtype: bool
        """
        return self._is_fda_regulated_device

    @is_fda_regulated_device.setter
    def is_fda_regulated_device(self, is_fda_regulated_device):
        """Sets the is_fda_regulated_device of this Oversight.

        Indication that a clinical study is studying a device product subject to section 510(k), 515, or 520(m) of the Federal Food, Drug, and Cosmetic Act.  # noqa: E501

        :param is_fda_regulated_device: The is_fda_regulated_device of this Oversight.  # noqa: E501
        :type: bool
        """

        self._is_fda_regulated_device = is_fda_regulated_device

    @property
    def is_unapproved_device(self):
        """Gets the is_unapproved_device of this Oversight.  # noqa: E501

        Indication that at least one device product studied in the clinical study has not been previously approved or cleared by the U.S. Food and Drug Administration (FDA) for one or more uses. true: At least one studied FDA-regulated device product has not been previously approved or cleared by FDA.  false: All studied FDA-regulated device products have been previously approved or cleared by FDA.  # noqa: E501

        :return: The is_unapproved_device of this Oversight.  # noqa: E501
        :rtype: bool
        """
        return self._is_unapproved_device

    @is_unapproved_device.setter
    def is_unapproved_device(self, is_unapproved_device):
        """Sets the is_unapproved_device of this Oversight.

        Indication that at least one device product studied in the clinical study has not been previously approved or cleared by the U.S. Food and Drug Administration (FDA) for one or more uses. true: At least one studied FDA-regulated device product has not been previously approved or cleared by FDA.  false: All studied FDA-regulated device products have been previously approved or cleared by FDA.  # noqa: E501

        :param is_unapproved_device: The is_unapproved_device of this Oversight.  # noqa: E501
        :type: bool
        """

        self._is_unapproved_device = is_unapproved_device

    @property
    def is_ppsd(self):
        """Gets the is_ppsd of this Oversight.  # noqa: E501

        Pediatric postmarket surveillance of a device.  # noqa: E501

        :return: The is_ppsd of this Oversight.  # noqa: E501
        :rtype: bool
        """
        return self._is_ppsd

    @is_ppsd.setter
    def is_ppsd(self, is_ppsd):
        """Sets the is_ppsd of this Oversight.

        Pediatric postmarket surveillance of a device.  # noqa: E501

        :param is_ppsd: The is_ppsd of this Oversight.  # noqa: E501
        :type: bool
        """

        self._is_ppsd = is_ppsd

    @property
    def is_us_export(self):
        """Gets the is_us_export of this Oversight.  # noqa: E501

        Whether any drug product (including a biological product) or device product studied in the clinical study is manufactured in the United States or one of its territories and exported for study in a clinical study in another country. Required if U.S. FDA-regulated Drug and/or U.S. FDA-regulated Device is true, U.S. FDA IND or IDE is false, and Facility Information does not include at least one U.S. location.  # noqa: E501

        :return: The is_us_export of this Oversight.  # noqa: E501
        :rtype: bool
        """
        return self._is_us_export

    @is_us_export.setter
    def is_us_export(self, is_us_export):
        """Sets the is_us_export of this Oversight.

        Whether any drug product (including a biological product) or device product studied in the clinical study is manufactured in the United States or one of its territories and exported for study in a clinical study in another country. Required if U.S. FDA-regulated Drug and/or U.S. FDA-regulated Device is true, U.S. FDA IND or IDE is false, and Facility Information does not include at least one U.S. location.  # noqa: E501

        :param is_us_export: The is_us_export of this Oversight.  # noqa: E501
        :type: bool
        """

        self._is_us_export = is_us_export

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Oversight, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Oversight):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
