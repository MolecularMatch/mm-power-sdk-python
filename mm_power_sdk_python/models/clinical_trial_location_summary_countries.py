# coding: utf-8

"""
    MolecularMatch MMPower

    MMPower API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@molecularmatch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ClinicalTrialLocationSummaryCountries(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'regions': 'list[str]',
        'region_codes': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'regions': 'regions',
        'region_codes': 'regionCodes'
    }

    def __init__(self, name=None, regions=None, region_codes=None):  # noqa: E501
        """ClinicalTrialLocationSummaryCountries - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._regions = None
        self._region_codes = None
        self.discriminator = None
        self.name = name
        if regions is not None:
            self.regions = regions
        if region_codes is not None:
            self.region_codes = region_codes

    @property
    def name(self):
        """Gets the name of this ClinicalTrialLocationSummaryCountries.  # noqa: E501

        Country name.  # noqa: E501

        :return: The name of this ClinicalTrialLocationSummaryCountries.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClinicalTrialLocationSummaryCountries.

        Country name.  # noqa: E501

        :param name: The name of this ClinicalTrialLocationSummaryCountries.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def regions(self):
        """Gets the regions of this ClinicalTrialLocationSummaryCountries.  # noqa: E501

        Sub divisions within the country with a trial site.  # noqa: E501

        :return: The regions of this ClinicalTrialLocationSummaryCountries.  # noqa: E501
        :rtype: list[str]
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this ClinicalTrialLocationSummaryCountries.

        Sub divisions within the country with a trial site.  # noqa: E501

        :param regions: The regions of this ClinicalTrialLocationSummaryCountries.  # noqa: E501
        :type: list[str]
        """

        self._regions = regions

    @property
    def region_codes(self):
        """Gets the region_codes of this ClinicalTrialLocationSummaryCountries.  # noqa: E501

        Sub division codes within the country with a trial site.  # noqa: E501

        :return: The region_codes of this ClinicalTrialLocationSummaryCountries.  # noqa: E501
        :rtype: list[str]
        """
        return self._region_codes

    @region_codes.setter
    def region_codes(self, region_codes):
        """Sets the region_codes of this ClinicalTrialLocationSummaryCountries.

        Sub division codes within the country with a trial site.  # noqa: E501

        :param region_codes: The region_codes of this ClinicalTrialLocationSummaryCountries.  # noqa: E501
        :type: list[str]
        """

        self._region_codes = region_codes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClinicalTrialLocationSummaryCountries, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClinicalTrialLocationSummaryCountries):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
