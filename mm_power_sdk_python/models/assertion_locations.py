# coding: utf-8

"""
    MolecularMatch MMPower

    MMPower API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@molecularmatch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AssertionLocations(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cdna': 'str',
        'amino_acid_change': 'str',
        'exon_number': 'list[int]',
        'intron_number': 'list[int]',
        'chr': 'str',
        'start': 'int',
        'stop': 'int',
        'ref': 'str',
        'alt': 'str',
        'strand': 'str',
        'reference_genome': 'str'
    }

    attribute_map = {
        'cdna': 'cdna',
        'amino_acid_change': 'amino_acid_change',
        'exon_number': 'exonNumber',
        'intron_number': 'intronNumber',
        'chr': 'chr',
        'start': 'start',
        'stop': 'stop',
        'ref': 'ref',
        'alt': 'alt',
        'strand': 'strand',
        'reference_genome': 'referenceGenome'
    }

    def __init__(self, cdna=None, amino_acid_change=None, exon_number=None, intron_number=None, chr=None, start=None, stop=None, ref=None, alt=None, strand=None, reference_genome=None):  # noqa: E501
        """AssertionLocations - a model defined in Swagger"""  # noqa: E501
        self._cdna = None
        self._amino_acid_change = None
        self._exon_number = None
        self._intron_number = None
        self._chr = None
        self._start = None
        self._stop = None
        self._ref = None
        self._alt = None
        self._strand = None
        self._reference_genome = None
        self.discriminator = None
        if cdna is not None:
            self.cdna = cdna
        if amino_acid_change is not None:
            self.amino_acid_change = amino_acid_change
        if exon_number is not None:
            self.exon_number = exon_number
        if intron_number is not None:
            self.intron_number = intron_number
        if chr is not None:
            self.chr = chr
        if start is not None:
            self.start = start
        if stop is not None:
            self.stop = stop
        if ref is not None:
            self.ref = ref
        if alt is not None:
            self.alt = alt
        if strand is not None:
            self.strand = strand
        if reference_genome is not None:
            self.reference_genome = reference_genome

    @property
    def cdna(self):
        """Gets the cdna of this AssertionLocations.  # noqa: E501


        :return: The cdna of this AssertionLocations.  # noqa: E501
        :rtype: str
        """
        return self._cdna

    @cdna.setter
    def cdna(self, cdna):
        """Sets the cdna of this AssertionLocations.


        :param cdna: The cdna of this AssertionLocations.  # noqa: E501
        :type: str
        """

        self._cdna = cdna

    @property
    def amino_acid_change(self):
        """Gets the amino_acid_change of this AssertionLocations.  # noqa: E501


        :return: The amino_acid_change of this AssertionLocations.  # noqa: E501
        :rtype: str
        """
        return self._amino_acid_change

    @amino_acid_change.setter
    def amino_acid_change(self, amino_acid_change):
        """Sets the amino_acid_change of this AssertionLocations.


        :param amino_acid_change: The amino_acid_change of this AssertionLocations.  # noqa: E501
        :type: str
        """

        self._amino_acid_change = amino_acid_change

    @property
    def exon_number(self):
        """Gets the exon_number of this AssertionLocations.  # noqa: E501


        :return: The exon_number of this AssertionLocations.  # noqa: E501
        :rtype: list[int]
        """
        return self._exon_number

    @exon_number.setter
    def exon_number(self, exon_number):
        """Sets the exon_number of this AssertionLocations.


        :param exon_number: The exon_number of this AssertionLocations.  # noqa: E501
        :type: list[int]
        """

        self._exon_number = exon_number

    @property
    def intron_number(self):
        """Gets the intron_number of this AssertionLocations.  # noqa: E501


        :return: The intron_number of this AssertionLocations.  # noqa: E501
        :rtype: list[int]
        """
        return self._intron_number

    @intron_number.setter
    def intron_number(self, intron_number):
        """Sets the intron_number of this AssertionLocations.


        :param intron_number: The intron_number of this AssertionLocations.  # noqa: E501
        :type: list[int]
        """

        self._intron_number = intron_number

    @property
    def chr(self):
        """Gets the chr of this AssertionLocations.  # noqa: E501


        :return: The chr of this AssertionLocations.  # noqa: E501
        :rtype: str
        """
        return self._chr

    @chr.setter
    def chr(self, chr):
        """Sets the chr of this AssertionLocations.


        :param chr: The chr of this AssertionLocations.  # noqa: E501
        :type: str
        """

        self._chr = chr

    @property
    def start(self):
        """Gets the start of this AssertionLocations.  # noqa: E501


        :return: The start of this AssertionLocations.  # noqa: E501
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this AssertionLocations.


        :param start: The start of this AssertionLocations.  # noqa: E501
        :type: int
        """

        self._start = start

    @property
    def stop(self):
        """Gets the stop of this AssertionLocations.  # noqa: E501


        :return: The stop of this AssertionLocations.  # noqa: E501
        :rtype: int
        """
        return self._stop

    @stop.setter
    def stop(self, stop):
        """Sets the stop of this AssertionLocations.


        :param stop: The stop of this AssertionLocations.  # noqa: E501
        :type: int
        """

        self._stop = stop

    @property
    def ref(self):
        """Gets the ref of this AssertionLocations.  # noqa: E501


        :return: The ref of this AssertionLocations.  # noqa: E501
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this AssertionLocations.


        :param ref: The ref of this AssertionLocations.  # noqa: E501
        :type: str
        """

        self._ref = ref

    @property
    def alt(self):
        """Gets the alt of this AssertionLocations.  # noqa: E501


        :return: The alt of this AssertionLocations.  # noqa: E501
        :rtype: str
        """
        return self._alt

    @alt.setter
    def alt(self, alt):
        """Sets the alt of this AssertionLocations.


        :param alt: The alt of this AssertionLocations.  # noqa: E501
        :type: str
        """

        self._alt = alt

    @property
    def strand(self):
        """Gets the strand of this AssertionLocations.  # noqa: E501


        :return: The strand of this AssertionLocations.  # noqa: E501
        :rtype: str
        """
        return self._strand

    @strand.setter
    def strand(self, strand):
        """Sets the strand of this AssertionLocations.


        :param strand: The strand of this AssertionLocations.  # noqa: E501
        :type: str
        """

        self._strand = strand

    @property
    def reference_genome(self):
        """Gets the reference_genome of this AssertionLocations.  # noqa: E501


        :return: The reference_genome of this AssertionLocations.  # noqa: E501
        :rtype: str
        """
        return self._reference_genome

    @reference_genome.setter
    def reference_genome(self, reference_genome):
        """Sets the reference_genome of this AssertionLocations.


        :param reference_genome: The reference_genome of this AssertionLocations.  # noqa: E501
        :type: str
        """
        allowed_values = ["grch37_hg19", "grch38_hg38"]  # noqa: E501
        if reference_genome not in allowed_values:
            raise ValueError(
                "Invalid value for `reference_genome` ({0}), must be one of {1}"  # noqa: E501
                .format(reference_genome, allowed_values)
            )

        self._reference_genome = reference_genome

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssertionLocations, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssertionLocations):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
