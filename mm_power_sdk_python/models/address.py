# coding: utf-8

"""
    MolecularMatch MMPower

    MMPower API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@molecularmatch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Address(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'street_name': 'str',
        'street_number': 'str',
        'po_box': 'str',
        'city': 'str',
        'sub_division': 'str',
        'country': 'str',
        'postal_code': 'str',
        'lat': 'float',
        'lon': 'float'
    }

    attribute_map = {
        'street_name': 'street_name',
        'street_number': 'street_number',
        'po_box': 'po_box',
        'city': 'city',
        'sub_division': 'sub_division',
        'country': 'country',
        'postal_code': 'postal_code',
        'lat': 'lat',
        'lon': 'lon'
    }

    def __init__(self, street_name=None, street_number=None, po_box=None, city=None, sub_division=None, country=None, postal_code=None, lat=None, lon=None):  # noqa: E501
        """Address - a model defined in Swagger"""  # noqa: E501
        self._street_name = None
        self._street_number = None
        self._po_box = None
        self._city = None
        self._sub_division = None
        self._country = None
        self._postal_code = None
        self._lat = None
        self._lon = None
        self.discriminator = None
        if street_name is not None:
            self.street_name = street_name
        if street_number is not None:
            self.street_number = street_number
        if po_box is not None:
            self.po_box = po_box
        if city is not None:
            self.city = city
        if sub_division is not None:
            self.sub_division = sub_division
        self.country = country
        self.postal_code = postal_code
        if lat is not None:
            self.lat = lat
        if lon is not None:
            self.lon = lon

    @property
    def street_name(self):
        """Gets the street_name of this Address.  # noqa: E501

        Address street name.  # noqa: E501

        :return: The street_name of this Address.  # noqa: E501
        :rtype: str
        """
        return self._street_name

    @street_name.setter
    def street_name(self, street_name):
        """Sets the street_name of this Address.

        Address street name.  # noqa: E501

        :param street_name: The street_name of this Address.  # noqa: E501
        :type: str
        """

        self._street_name = street_name

    @property
    def street_number(self):
        """Gets the street_number of this Address.  # noqa: E501

        Address street number.  # noqa: E501

        :return: The street_number of this Address.  # noqa: E501
        :rtype: str
        """
        return self._street_number

    @street_number.setter
    def street_number(self, street_number):
        """Sets the street_number of this Address.

        Address street number.  # noqa: E501

        :param street_number: The street_number of this Address.  # noqa: E501
        :type: str
        """

        self._street_number = street_number

    @property
    def po_box(self):
        """Gets the po_box of this Address.  # noqa: E501

        Address P.O. Box.  # noqa: E501

        :return: The po_box of this Address.  # noqa: E501
        :rtype: str
        """
        return self._po_box

    @po_box.setter
    def po_box(self, po_box):
        """Sets the po_box of this Address.

        Address P.O. Box.  # noqa: E501

        :param po_box: The po_box of this Address.  # noqa: E501
        :type: str
        """

        self._po_box = po_box

    @property
    def city(self):
        """Gets the city of this Address.  # noqa: E501

        Address city.  # noqa: E501

        :return: The city of this Address.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Address.

        Address city.  # noqa: E501

        :param city: The city of this Address.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def sub_division(self):
        """Gets the sub_division of this Address.  # noqa: E501

        Address sub division.  Could be a state, province, region, etc.  # noqa: E501

        :return: The sub_division of this Address.  # noqa: E501
        :rtype: str
        """
        return self._sub_division

    @sub_division.setter
    def sub_division(self, sub_division):
        """Sets the sub_division of this Address.

        Address sub division.  Could be a state, province, region, etc.  # noqa: E501

        :param sub_division: The sub_division of this Address.  # noqa: E501
        :type: str
        """

        self._sub_division = sub_division

    @property
    def country(self):
        """Gets the country of this Address.  # noqa: E501

        The ISO-3166 2 character country code.  # noqa: E501

        :return: The country of this Address.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Address.

        The ISO-3166 2 character country code.  # noqa: E501

        :param country: The country of this Address.  # noqa: E501
        :type: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")  # noqa: E501

        self._country = country

    @property
    def postal_code(self):
        """Gets the postal_code of this Address.  # noqa: E501

        Address postal code.  # noqa: E501

        :return: The postal_code of this Address.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Address.

        Address postal code.  # noqa: E501

        :param postal_code: The postal_code of this Address.  # noqa: E501
        :type: str
        """
        if postal_code is None:
            raise ValueError("Invalid value for `postal_code`, must not be `None`")  # noqa: E501

        self._postal_code = postal_code

    @property
    def lat(self):
        """Gets the lat of this Address.  # noqa: E501

        Latitude  # noqa: E501

        :return: The lat of this Address.  # noqa: E501
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this Address.

        Latitude  # noqa: E501

        :param lat: The lat of this Address.  # noqa: E501
        :type: float
        """

        self._lat = lat

    @property
    def lon(self):
        """Gets the lon of this Address.  # noqa: E501

        Longitude  # noqa: E501

        :return: The lon of this Address.  # noqa: E501
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """Sets the lon of this Address.

        Longitude  # noqa: E501

        :param lon: The lon of this Address.  # noqa: E501
        :type: float
        """

        self._lon = lon

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Address, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Address):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
