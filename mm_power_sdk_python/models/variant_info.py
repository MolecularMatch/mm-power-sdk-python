# coding: utf-8

"""
    MolecularMatch MMPower

    MMPower API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@molecularmatch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from mm_power_sdk_python.models.variant_info_fusions import VariantInfoFusions  # noqa: F401,E501
from mm_power_sdk_python.models.variant_info_locations import VariantInfoLocations  # noqa: F401,E501


class VariantInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'transcript': 'str',
        'classification': 'str',
        'consequences': 'list[str]',
        'pop_freq_max': 'float',
        'cosmic_id': 'str',
        'gene': 'str',
        'gene_fusion_partner': 'str',
        'locations': 'list[VariantInfoLocations]',
        'fusions': 'list[VariantInfoFusions]'
    }

    attribute_map = {
        'name': 'name',
        'transcript': 'transcript',
        'classification': 'classification',
        'consequences': 'consequences',
        'pop_freq_max': 'popFreqMax',
        'cosmic_id': 'COSMIC_ID',
        'gene': 'gene',
        'gene_fusion_partner': 'geneFusionPartner',
        'locations': 'locations',
        'fusions': 'fusions'
    }

    def __init__(self, name=None, transcript=None, classification=None, consequences=None, pop_freq_max=None, cosmic_id=None, gene=None, gene_fusion_partner=None, locations=None, fusions=None):  # noqa: E501
        """VariantInfo - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._transcript = None
        self._classification = None
        self._consequences = None
        self._pop_freq_max = None
        self._cosmic_id = None
        self._gene = None
        self._gene_fusion_partner = None
        self._locations = None
        self._fusions = None
        self.discriminator = None
        self.name = name
        if transcript is not None:
            self.transcript = transcript
        if classification is not None:
            self.classification = classification
        if consequences is not None:
            self.consequences = consequences
        if pop_freq_max is not None:
            self.pop_freq_max = pop_freq_max
        if cosmic_id is not None:
            self.cosmic_id = cosmic_id
        if gene is not None:
            self.gene = gene
        if gene_fusion_partner is not None:
            self.gene_fusion_partner = gene_fusion_partner
        if locations is not None:
            self.locations = locations
        if fusions is not None:
            self.fusions = fusions

    @property
    def name(self):
        """Gets the name of this VariantInfo.  # noqa: E501


        :return: The name of this VariantInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VariantInfo.


        :param name: The name of this VariantInfo.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def transcript(self):
        """Gets the transcript of this VariantInfo.  # noqa: E501


        :return: The transcript of this VariantInfo.  # noqa: E501
        :rtype: str
        """
        return self._transcript

    @transcript.setter
    def transcript(self, transcript):
        """Sets the transcript of this VariantInfo.


        :param transcript: The transcript of this VariantInfo.  # noqa: E501
        :type: str
        """

        self._transcript = transcript

    @property
    def classification(self):
        """Gets the classification of this VariantInfo.  # noqa: E501


        :return: The classification of this VariantInfo.  # noqa: E501
        :rtype: str
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """Sets the classification of this VariantInfo.


        :param classification: The classification of this VariantInfo.  # noqa: E501
        :type: str
        """

        self._classification = classification

    @property
    def consequences(self):
        """Gets the consequences of this VariantInfo.  # noqa: E501


        :return: The consequences of this VariantInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._consequences

    @consequences.setter
    def consequences(self, consequences):
        """Sets the consequences of this VariantInfo.


        :param consequences: The consequences of this VariantInfo.  # noqa: E501
        :type: list[str]
        """

        self._consequences = consequences

    @property
    def pop_freq_max(self):
        """Gets the pop_freq_max of this VariantInfo.  # noqa: E501


        :return: The pop_freq_max of this VariantInfo.  # noqa: E501
        :rtype: float
        """
        return self._pop_freq_max

    @pop_freq_max.setter
    def pop_freq_max(self, pop_freq_max):
        """Sets the pop_freq_max of this VariantInfo.


        :param pop_freq_max: The pop_freq_max of this VariantInfo.  # noqa: E501
        :type: float
        """

        self._pop_freq_max = pop_freq_max

    @property
    def cosmic_id(self):
        """Gets the cosmic_id of this VariantInfo.  # noqa: E501


        :return: The cosmic_id of this VariantInfo.  # noqa: E501
        :rtype: str
        """
        return self._cosmic_id

    @cosmic_id.setter
    def cosmic_id(self, cosmic_id):
        """Sets the cosmic_id of this VariantInfo.


        :param cosmic_id: The cosmic_id of this VariantInfo.  # noqa: E501
        :type: str
        """

        self._cosmic_id = cosmic_id

    @property
    def gene(self):
        """Gets the gene of this VariantInfo.  # noqa: E501


        :return: The gene of this VariantInfo.  # noqa: E501
        :rtype: str
        """
        return self._gene

    @gene.setter
    def gene(self, gene):
        """Sets the gene of this VariantInfo.


        :param gene: The gene of this VariantInfo.  # noqa: E501
        :type: str
        """

        self._gene = gene

    @property
    def gene_fusion_partner(self):
        """Gets the gene_fusion_partner of this VariantInfo.  # noqa: E501


        :return: The gene_fusion_partner of this VariantInfo.  # noqa: E501
        :rtype: str
        """
        return self._gene_fusion_partner

    @gene_fusion_partner.setter
    def gene_fusion_partner(self, gene_fusion_partner):
        """Sets the gene_fusion_partner of this VariantInfo.


        :param gene_fusion_partner: The gene_fusion_partner of this VariantInfo.  # noqa: E501
        :type: str
        """

        self._gene_fusion_partner = gene_fusion_partner

    @property
    def locations(self):
        """Gets the locations of this VariantInfo.  # noqa: E501


        :return: The locations of this VariantInfo.  # noqa: E501
        :rtype: list[VariantInfoLocations]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this VariantInfo.


        :param locations: The locations of this VariantInfo.  # noqa: E501
        :type: list[VariantInfoLocations]
        """

        self._locations = locations

    @property
    def fusions(self):
        """Gets the fusions of this VariantInfo.  # noqa: E501


        :return: The fusions of this VariantInfo.  # noqa: E501
        :rtype: list[VariantInfoFusions]
        """
        return self._fusions

    @fusions.setter
    def fusions(self, fusions):
        """Sets the fusions of this VariantInfo.


        :param fusions: The fusions of this VariantInfo.  # noqa: E501
        :type: list[VariantInfoFusions]
        """

        self._fusions = fusions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VariantInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VariantInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
