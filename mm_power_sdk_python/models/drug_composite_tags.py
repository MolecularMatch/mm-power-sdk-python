# coding: utf-8

"""
    MolecularMatch MMPower

    MMPower API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@molecularmatch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class DrugCompositeTags(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'term': 'str',
        'facet': 'str',
        'filter_type': 'str',
        'priority': 'int',
        'suppress': 'bool',
        'suppress_boost': 'bool',
        'custom': 'bool',
        'manual_suppress': 'int'
    }

    attribute_map = {
        'id': 'id',
        'term': 'term',
        'facet': 'facet',
        'filter_type': 'filterType',
        'priority': 'priority',
        'suppress': 'suppress',
        'suppress_boost': 'suppressBoost',
        'custom': 'custom',
        'manual_suppress': 'manualSuppress'
    }

    def __init__(self, id=None, term=None, facet=None, filter_type='include', priority=None, suppress=None, suppress_boost=None, custom=None, manual_suppress=None):  # noqa: E501
        """DrugCompositeTags - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._term = None
        self._facet = None
        self._filter_type = None
        self._priority = None
        self._suppress = None
        self._suppress_boost = None
        self._custom = None
        self._manual_suppress = None
        self.discriminator = None
        self.id = id
        self.term = term
        self.facet = facet
        if filter_type is not None:
            self.filter_type = filter_type
        self.priority = priority
        if suppress is not None:
            self.suppress = suppress
        if suppress_boost is not None:
            self.suppress_boost = suppress_boost
        if custom is not None:
            self.custom = custom
        if manual_suppress is not None:
            self.manual_suppress = manual_suppress

    @property
    def id(self):
        """Gets the id of this DrugCompositeTags.  # noqa: E501


        :return: The id of this DrugCompositeTags.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DrugCompositeTags.


        :param id: The id of this DrugCompositeTags.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def term(self):
        """Gets the term of this DrugCompositeTags.  # noqa: E501


        :return: The term of this DrugCompositeTags.  # noqa: E501
        :rtype: str
        """
        return self._term

    @term.setter
    def term(self, term):
        """Sets the term of this DrugCompositeTags.


        :param term: The term of this DrugCompositeTags.  # noqa: E501
        :type: str
        """
        if term is None:
            raise ValueError("Invalid value for `term`, must not be `None`")  # noqa: E501

        self._term = term

    @property
    def facet(self):
        """Gets the facet of this DrugCompositeTags.  # noqa: E501


        :return: The facet of this DrugCompositeTags.  # noqa: E501
        :rtype: str
        """
        return self._facet

    @facet.setter
    def facet(self, facet):
        """Sets the facet of this DrugCompositeTags.


        :param facet: The facet of this DrugCompositeTags.  # noqa: E501
        :type: str
        """
        if facet is None:
            raise ValueError("Invalid value for `facet`, must not be `None`")  # noqa: E501

        self._facet = facet

    @property
    def filter_type(self):
        """Gets the filter_type of this DrugCompositeTags.  # noqa: E501


        :return: The filter_type of this DrugCompositeTags.  # noqa: E501
        :rtype: str
        """
        return self._filter_type

    @filter_type.setter
    def filter_type(self, filter_type):
        """Sets the filter_type of this DrugCompositeTags.


        :param filter_type: The filter_type of this DrugCompositeTags.  # noqa: E501
        :type: str
        """
        allowed_values = ["include", "exclude"]  # noqa: E501
        if filter_type not in allowed_values:
            raise ValueError(
                "Invalid value for `filter_type` ({0}), must be one of {1}"  # noqa: E501
                .format(filter_type, allowed_values)
            )

        self._filter_type = filter_type

    @property
    def priority(self):
        """Gets the priority of this DrugCompositeTags.  # noqa: E501


        :return: The priority of this DrugCompositeTags.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this DrugCompositeTags.


        :param priority: The priority of this DrugCompositeTags.  # noqa: E501
        :type: int
        """
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")  # noqa: E501

        self._priority = priority

    @property
    def suppress(self):
        """Gets the suppress of this DrugCompositeTags.  # noqa: E501


        :return: The suppress of this DrugCompositeTags.  # noqa: E501
        :rtype: bool
        """
        return self._suppress

    @suppress.setter
    def suppress(self, suppress):
        """Sets the suppress of this DrugCompositeTags.


        :param suppress: The suppress of this DrugCompositeTags.  # noqa: E501
        :type: bool
        """

        self._suppress = suppress

    @property
    def suppress_boost(self):
        """Gets the suppress_boost of this DrugCompositeTags.  # noqa: E501


        :return: The suppress_boost of this DrugCompositeTags.  # noqa: E501
        :rtype: bool
        """
        return self._suppress_boost

    @suppress_boost.setter
    def suppress_boost(self, suppress_boost):
        """Sets the suppress_boost of this DrugCompositeTags.


        :param suppress_boost: The suppress_boost of this DrugCompositeTags.  # noqa: E501
        :type: bool
        """

        self._suppress_boost = suppress_boost

    @property
    def custom(self):
        """Gets the custom of this DrugCompositeTags.  # noqa: E501


        :return: The custom of this DrugCompositeTags.  # noqa: E501
        :rtype: bool
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """Sets the custom of this DrugCompositeTags.


        :param custom: The custom of this DrugCompositeTags.  # noqa: E501
        :type: bool
        """

        self._custom = custom

    @property
    def manual_suppress(self):
        """Gets the manual_suppress of this DrugCompositeTags.  # noqa: E501


        :return: The manual_suppress of this DrugCompositeTags.  # noqa: E501
        :rtype: int
        """
        return self._manual_suppress

    @manual_suppress.setter
    def manual_suppress(self, manual_suppress):
        """Sets the manual_suppress of this DrugCompositeTags.


        :param manual_suppress: The manual_suppress of this DrugCompositeTags.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if manual_suppress not in allowed_values:
            raise ValueError(
                "Invalid value for `manual_suppress` ({0}), must be one of {1}"  # noqa: E501
                .format(manual_suppress, allowed_values)
            )

        self._manual_suppress = manual_suppress

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DrugCompositeTags, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DrugCompositeTags):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
