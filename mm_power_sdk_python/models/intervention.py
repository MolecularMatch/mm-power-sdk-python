# coding: utf-8

"""
    MolecularMatch MMPower

    MMPower API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@molecularmatch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Intervention(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'intervention_type': 'str',
        'intervention_name': 'str',
        'description': 'str',
        'arm_group_label': 'list[str]',
        'other_name': 'list[str]'
    }

    attribute_map = {
        'intervention_type': 'intervention_type',
        'intervention_name': 'intervention_name',
        'description': 'description',
        'arm_group_label': 'arm_group_label',
        'other_name': 'other_name'
    }

    def __init__(self, intervention_type='Other', intervention_name=None, description=None, arm_group_label=None, other_name=None):  # noqa: E501
        """Intervention - a model defined in Swagger"""  # noqa: E501
        self._intervention_type = None
        self._intervention_name = None
        self._description = None
        self._arm_group_label = None
        self._other_name = None
        self.discriminator = None
        if intervention_type is not None:
            self.intervention_type = intervention_type
        self.intervention_name = intervention_name
        if description is not None:
            self.description = description
        if arm_group_label is not None:
            self.arm_group_label = arm_group_label
        if other_name is not None:
            self.other_name = other_name

    @property
    def intervention_type(self):
        """Gets the intervention_type of this Intervention.  # noqa: E501

        For each intervention studied in the clinical study, the general type of intervention.  # noqa: E501

        :return: The intervention_type of this Intervention.  # noqa: E501
        :rtype: str
        """
        return self._intervention_type

    @intervention_type.setter
    def intervention_type(self, intervention_type):
        """Sets the intervention_type of this Intervention.

        For each intervention studied in the clinical study, the general type of intervention.  # noqa: E501

        :param intervention_type: The intervention_type of this Intervention.  # noqa: E501
        :type: str
        """
        allowed_values = ["Behavioral", "Biological", "Combination Product", "Device", "Diagnostic Test", "Dietary Supplement", "Drug", "Genetic", "Procedure", "Radiation", "Other"]  # noqa: E501
        if intervention_type not in allowed_values:
            raise ValueError(
                "Invalid value for `intervention_type` ({0}), must be one of {1}"  # noqa: E501
                .format(intervention_type, allowed_values)
            )

        self._intervention_type = intervention_type

    @property
    def intervention_name(self):
        """Gets the intervention_name of this Intervention.  # noqa: E501

        A brief descriptive name used to refer to the intervention(s) studied in each arm of the clinical study.  # noqa: E501

        :return: The intervention_name of this Intervention.  # noqa: E501
        :rtype: str
        """
        return self._intervention_name

    @intervention_name.setter
    def intervention_name(self, intervention_name):
        """Sets the intervention_name of this Intervention.

        A brief descriptive name used to refer to the intervention(s) studied in each arm of the clinical study.  # noqa: E501

        :param intervention_name: The intervention_name of this Intervention.  # noqa: E501
        :type: str
        """
        if intervention_name is None:
            raise ValueError("Invalid value for `intervention_name`, must not be `None`")  # noqa: E501

        self._intervention_name = intervention_name

    @property
    def description(self):
        """Gets the description of this Intervention.  # noqa: E501

        Details that can be made public about the intervention, other than the Intervention Name(s) and Other Intervention Name(s), sufficient to distinguish the intervention from other, similar interventions studied in the same or another clinical study. For example, interventions involving drugs may include dosage form, dosage, frequency, and duration.  # noqa: E501

        :return: The description of this Intervention.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Intervention.

        Details that can be made public about the intervention, other than the Intervention Name(s) and Other Intervention Name(s), sufficient to distinguish the intervention from other, similar interventions studied in the same or another clinical study. For example, interventions involving drugs may include dosage form, dosage, frequency, and duration.  # noqa: E501

        :param description: The description of this Intervention.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def arm_group_label(self):
        """Gets the arm_group_label of this Intervention.  # noqa: E501

        If multiple Arms or Groups have been specified, indicate which Arm Groups this intervention applies to.  # noqa: E501

        :return: The arm_group_label of this Intervention.  # noqa: E501
        :rtype: list[str]
        """
        return self._arm_group_label

    @arm_group_label.setter
    def arm_group_label(self, arm_group_label):
        """Sets the arm_group_label of this Intervention.

        If multiple Arms or Groups have been specified, indicate which Arm Groups this intervention applies to.  # noqa: E501

        :param arm_group_label: The arm_group_label of this Intervention.  # noqa: E501
        :type: list[str]
        """

        self._arm_group_label = arm_group_label

    @property
    def other_name(self):
        """Gets the other_name of this Intervention.  # noqa: E501


        :return: The other_name of this Intervention.  # noqa: E501
        :rtype: list[str]
        """
        return self._other_name

    @other_name.setter
    def other_name(self, other_name):
        """Sets the other_name of this Intervention.


        :param other_name: The other_name of this Intervention.  # noqa: E501
        :type: list[str]
        """

        self._other_name = other_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Intervention, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Intervention):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
