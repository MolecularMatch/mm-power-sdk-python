# coding: utf-8

"""
    MolecularMatch MMPower

    MMPower API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@molecularmatch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.clinical_trial_arm_groups import ClinicalTrialArmGroups  # noqa: F401,E501
from swagger_client.models.clinical_trial_countries import ClinicalTrialCountries  # noqa: F401,E501
from swagger_client.models.clinical_trial_eligibility import ClinicalTrialEligibility  # noqa: F401,E501
from swagger_client.models.clinical_trial_interventions import ClinicalTrialInterventions  # noqa: F401,E501
from swagger_client.models.clinical_trial_overall_official import ClinicalTrialOverallOfficial  # noqa: F401,E501
from swagger_client.models.clinical_trial_primary_outcomes import ClinicalTrialPrimaryOutcomes  # noqa: F401,E501
from swagger_client.models.clinical_trial_sponsors import ClinicalTrialSponsors  # noqa: F401,E501
from swagger_client.models.mongo_trial_locations import MongoTrialLocations  # noqa: F401,E501
from swagger_client.models.mongo_trial_study_design import MongoTrialStudyDesign  # noqa: F401,E501
from swagger_client.models.mongo_trial_synonyms import MongoTrialSynonyms  # noqa: F401,E501
from swagger_client.models.object import Object  # noqa: F401,E501


class MongoTrial(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mboost': 'float',
        'import_date': 'datetime',
        'id': 'str',
        'source': 'str',
        'exclude': 'bool',
        'custom': 'bool',
        'brief_title': 'str',
        'patient_title': 'str',
        'title': 'str',
        'brief_summary': 'str',
        'summary': 'str',
        'status': 'str',
        'phase': 'str',
        'study_type': 'str',
        'study_design': 'MongoTrialStudyDesign',
        'start_date': 'datetime',
        'completion_date': 'datetime',
        'first_received_date': 'datetime',
        'last_changed_date': 'datetime',
        'verification_date': 'datetime',
        'sponsors': 'list[ClinicalTrialSponsors]',
        'conditions': 'list[str]',
        'interventions': 'list[ClinicalTrialInterventions]',
        'keywords': 'list[str]',
        'arm_groups': 'list[ClinicalTrialArmGroups]',
        'primary_outcomes': 'list[ClinicalTrialPrimaryOutcomes]',
        'secondary_outcomes': 'list[ClinicalTrialPrimaryOutcomes]',
        'other_outcomes': 'list[ClinicalTrialPrimaryOutcomes]',
        'eligibility': 'ClinicalTrialEligibility',
        'enrollment': 'int',
        'min_age': 'float',
        'max_age': 'float',
        'gender': 'list[str]',
        'overall_official': 'list[ClinicalTrialOverallOfficial]',
        'overall_contact': 'ClinicalTrialOverallOfficial',
        'overall_contact_backup': 'ClinicalTrialOverallOfficial',
        'mm_email': 'str',
        'wrong_email': 'bool',
        'locations': 'list[MongoTrialLocations]',
        'countries': 'list[ClinicalTrialCountries]',
        'inclusion_criteria': 'str',
        'exclusion_criteria': 'str',
        'synonyms': 'list[MongoTrialSynonyms]',
        'acronym': 'str',
        'link': 'str',
        'who_link': 'str',
        'valid': 'Object',
        'valid_message': 'str'
    }

    attribute_map = {
        'mboost': 'mboost',
        'import_date': 'importDate',
        'id': 'id',
        'source': 'source',
        'exclude': 'exclude',
        'custom': 'custom',
        'brief_title': 'briefTitle',
        'patient_title': 'patientTitle',
        'title': 'title',
        'brief_summary': 'briefSummary',
        'summary': 'summary',
        'status': 'status',
        'phase': 'phase',
        'study_type': 'studyType',
        'study_design': 'studyDesign',
        'start_date': 'startDate',
        'completion_date': 'completionDate',
        'first_received_date': 'firstReceivedDate',
        'last_changed_date': 'lastChangedDate',
        'verification_date': 'verificationDate',
        'sponsors': 'sponsors',
        'conditions': 'conditions',
        'interventions': 'interventions',
        'keywords': 'keywords',
        'arm_groups': 'armGroups',
        'primary_outcomes': 'primaryOutcomes',
        'secondary_outcomes': 'secondaryOutcomes',
        'other_outcomes': 'otherOutcomes',
        'eligibility': 'eligibility',
        'enrollment': 'enrollment',
        'min_age': 'minAge',
        'max_age': 'maxAge',
        'gender': 'gender',
        'overall_official': 'overallOfficial',
        'overall_contact': 'overallContact',
        'overall_contact_backup': 'overallContactBackup',
        'mm_email': 'mmEmail',
        'wrong_email': 'wrongEmail',
        'locations': 'locations',
        'countries': 'countries',
        'inclusion_criteria': 'inclusionCriteria',
        'exclusion_criteria': 'exclusionCriteria',
        'synonyms': 'synonyms',
        'acronym': 'acronym',
        'link': 'link',
        'who_link': 'whoLink',
        'valid': '_valid',
        'valid_message': '_validMessage'
    }

    def __init__(self, mboost=None, import_date=None, id=None, source=None, exclude=None, custom=None, brief_title=None, patient_title=None, title=None, brief_summary=None, summary=None, status=None, phase=None, study_type=None, study_design=None, start_date=None, completion_date=None, first_received_date=None, last_changed_date=None, verification_date=None, sponsors=None, conditions=None, interventions=None, keywords=None, arm_groups=None, primary_outcomes=None, secondary_outcomes=None, other_outcomes=None, eligibility=None, enrollment=None, min_age=None, max_age=None, gender=None, overall_official=None, overall_contact=None, overall_contact_backup=None, mm_email=None, wrong_email=None, locations=None, countries=None, inclusion_criteria=None, exclusion_criteria=None, synonyms=None, acronym=None, link=None, who_link=None, valid=None, valid_message=None):  # noqa: E501
        """MongoTrial - a model defined in Swagger"""  # noqa: E501
        self._mboost = None
        self._import_date = None
        self._id = None
        self._source = None
        self._exclude = None
        self._custom = None
        self._brief_title = None
        self._patient_title = None
        self._title = None
        self._brief_summary = None
        self._summary = None
        self._status = None
        self._phase = None
        self._study_type = None
        self._study_design = None
        self._start_date = None
        self._completion_date = None
        self._first_received_date = None
        self._last_changed_date = None
        self._verification_date = None
        self._sponsors = None
        self._conditions = None
        self._interventions = None
        self._keywords = None
        self._arm_groups = None
        self._primary_outcomes = None
        self._secondary_outcomes = None
        self._other_outcomes = None
        self._eligibility = None
        self._enrollment = None
        self._min_age = None
        self._max_age = None
        self._gender = None
        self._overall_official = None
        self._overall_contact = None
        self._overall_contact_backup = None
        self._mm_email = None
        self._wrong_email = None
        self._locations = None
        self._countries = None
        self._inclusion_criteria = None
        self._exclusion_criteria = None
        self._synonyms = None
        self._acronym = None
        self._link = None
        self._who_link = None
        self._valid = None
        self._valid_message = None
        self.discriminator = None
        if mboost is not None:
            self.mboost = mboost
        if import_date is not None:
            self.import_date = import_date
        self.id = id
        self.source = source
        if exclude is not None:
            self.exclude = exclude
        if custom is not None:
            self.custom = custom
        if brief_title is not None:
            self.brief_title = brief_title
        if patient_title is not None:
            self.patient_title = patient_title
        if title is not None:
            self.title = title
        if brief_summary is not None:
            self.brief_summary = brief_summary
        if summary is not None:
            self.summary = summary
        if status is not None:
            self.status = status
        if phase is not None:
            self.phase = phase
        if study_type is not None:
            self.study_type = study_type
        if study_design is not None:
            self.study_design = study_design
        if start_date is not None:
            self.start_date = start_date
        if completion_date is not None:
            self.completion_date = completion_date
        if first_received_date is not None:
            self.first_received_date = first_received_date
        if last_changed_date is not None:
            self.last_changed_date = last_changed_date
        if verification_date is not None:
            self.verification_date = verification_date
        if sponsors is not None:
            self.sponsors = sponsors
        if conditions is not None:
            self.conditions = conditions
        if interventions is not None:
            self.interventions = interventions
        if keywords is not None:
            self.keywords = keywords
        if arm_groups is not None:
            self.arm_groups = arm_groups
        if primary_outcomes is not None:
            self.primary_outcomes = primary_outcomes
        if secondary_outcomes is not None:
            self.secondary_outcomes = secondary_outcomes
        if other_outcomes is not None:
            self.other_outcomes = other_outcomes
        if eligibility is not None:
            self.eligibility = eligibility
        if enrollment is not None:
            self.enrollment = enrollment
        self.min_age = min_age
        self.max_age = max_age
        if gender is not None:
            self.gender = gender
        if overall_official is not None:
            self.overall_official = overall_official
        if overall_contact is not None:
            self.overall_contact = overall_contact
        if overall_contact_backup is not None:
            self.overall_contact_backup = overall_contact_backup
        if mm_email is not None:
            self.mm_email = mm_email
        if wrong_email is not None:
            self.wrong_email = wrong_email
        if locations is not None:
            self.locations = locations
        if countries is not None:
            self.countries = countries
        if inclusion_criteria is not None:
            self.inclusion_criteria = inclusion_criteria
        if exclusion_criteria is not None:
            self.exclusion_criteria = exclusion_criteria
        if synonyms is not None:
            self.synonyms = synonyms
        if acronym is not None:
            self.acronym = acronym
        if link is not None:
            self.link = link
        if who_link is not None:
            self.who_link = who_link
        if valid is not None:
            self.valid = valid
        if valid_message is not None:
            self.valid_message = valid_message

    @property
    def mboost(self):
        """Gets the mboost of this MongoTrial.  # noqa: E501

        intrinsic boost to the record.  # noqa: E501

        :return: The mboost of this MongoTrial.  # noqa: E501
        :rtype: float
        """
        return self._mboost

    @mboost.setter
    def mboost(self, mboost):
        """Sets the mboost of this MongoTrial.

        intrinsic boost to the record.  # noqa: E501

        :param mboost: The mboost of this MongoTrial.  # noqa: E501
        :type: float
        """

        self._mboost = mboost

    @property
    def import_date(self):
        """Gets the import_date of this MongoTrial.  # noqa: E501

        date this record was imported into the MolecularMatch database.  # noqa: E501

        :return: The import_date of this MongoTrial.  # noqa: E501
        :rtype: datetime
        """
        return self._import_date

    @import_date.setter
    def import_date(self, import_date):
        """Sets the import_date of this MongoTrial.

        date this record was imported into the MolecularMatch database.  # noqa: E501

        :param import_date: The import_date of this MongoTrial.  # noqa: E501
        :type: datetime
        """

        self._import_date = import_date

    @property
    def id(self):
        """Gets the id of this MongoTrial.  # noqa: E501

        unique identifier.  # noqa: E501

        :return: The id of this MongoTrial.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MongoTrial.

        unique identifier.  # noqa: E501

        :param id: The id of this MongoTrial.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def source(self):
        """Gets the source of this MongoTrial.  # noqa: E501

        native data source of this record  # noqa: E501

        :return: The source of this MongoTrial.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this MongoTrial.

        native data source of this record  # noqa: E501

        :param source: The source of this MongoTrial.  # noqa: E501
        :type: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def exclude(self):
        """Gets the exclude of this MongoTrial.  # noqa: E501

        soft exclude from the MolecularMatch dataset.  # noqa: E501

        :return: The exclude of this MongoTrial.  # noqa: E501
        :rtype: bool
        """
        return self._exclude

    @exclude.setter
    def exclude(self, exclude):
        """Sets the exclude of this MongoTrial.

        soft exclude from the MolecularMatch dataset.  # noqa: E501

        :param exclude: The exclude of this MongoTrial.  # noqa: E501
        :type: bool
        """

        self._exclude = exclude

    @property
    def custom(self):
        """Gets the custom of this MongoTrial.  # noqa: E501

        custom record in the MolecularMatch dataset  # noqa: E501

        :return: The custom of this MongoTrial.  # noqa: E501
        :rtype: bool
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """Sets the custom of this MongoTrial.

        custom record in the MolecularMatch dataset  # noqa: E501

        :param custom: The custom of this MongoTrial.  # noqa: E501
        :type: bool
        """

        self._custom = custom

    @property
    def brief_title(self):
        """Gets the brief_title of this MongoTrial.  # noqa: E501

        Abbreviated title for the clinical trial.  # noqa: E501

        :return: The brief_title of this MongoTrial.  # noqa: E501
        :rtype: str
        """
        return self._brief_title

    @brief_title.setter
    def brief_title(self, brief_title):
        """Sets the brief_title of this MongoTrial.

        Abbreviated title for the clinical trial.  # noqa: E501

        :param brief_title: The brief_title of this MongoTrial.  # noqa: E501
        :type: str
        """

        self._brief_title = brief_title

    @property
    def patient_title(self):
        """Gets the patient_title of this MongoTrial.  # noqa: E501

        Patient friendly title for the clinical trial.  # noqa: E501

        :return: The patient_title of this MongoTrial.  # noqa: E501
        :rtype: str
        """
        return self._patient_title

    @patient_title.setter
    def patient_title(self, patient_title):
        """Sets the patient_title of this MongoTrial.

        Patient friendly title for the clinical trial.  # noqa: E501

        :param patient_title: The patient_title of this MongoTrial.  # noqa: E501
        :type: str
        """

        self._patient_title = patient_title

    @property
    def title(self):
        """Gets the title of this MongoTrial.  # noqa: E501

        Official title for the clinical trial.  # noqa: E501

        :return: The title of this MongoTrial.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this MongoTrial.

        Official title for the clinical trial.  # noqa: E501

        :param title: The title of this MongoTrial.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def brief_summary(self):
        """Gets the brief_summary of this MongoTrial.  # noqa: E501

        Abbreviated summary for the clinical trial.  # noqa: E501

        :return: The brief_summary of this MongoTrial.  # noqa: E501
        :rtype: str
        """
        return self._brief_summary

    @brief_summary.setter
    def brief_summary(self, brief_summary):
        """Sets the brief_summary of this MongoTrial.

        Abbreviated summary for the clinical trial.  # noqa: E501

        :param brief_summary: The brief_summary of this MongoTrial.  # noqa: E501
        :type: str
        """

        self._brief_summary = brief_summary

    @property
    def summary(self):
        """Gets the summary of this MongoTrial.  # noqa: E501

        Official title for the clinical trial.  # noqa: E501

        :return: The summary of this MongoTrial.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this MongoTrial.

        Official title for the clinical trial.  # noqa: E501

        :param summary: The summary of this MongoTrial.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def status(self):
        """Gets the status of this MongoTrial.  # noqa: E501


        :return: The status of this MongoTrial.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MongoTrial.


        :param status: The status of this MongoTrial.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def phase(self):
        """Gets the phase of this MongoTrial.  # noqa: E501

        Recruitment status for the clinical trial.  # noqa: E501

        :return: The phase of this MongoTrial.  # noqa: E501
        :rtype: str
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this MongoTrial.

        Recruitment status for the clinical trial.  # noqa: E501

        :param phase: The phase of this MongoTrial.  # noqa: E501
        :type: str
        """

        self._phase = phase

    @property
    def study_type(self):
        """Gets the study_type of this MongoTrial.  # noqa: E501


        :return: The study_type of this MongoTrial.  # noqa: E501
        :rtype: str
        """
        return self._study_type

    @study_type.setter
    def study_type(self, study_type):
        """Sets the study_type of this MongoTrial.


        :param study_type: The study_type of this MongoTrial.  # noqa: E501
        :type: str
        """

        self._study_type = study_type

    @property
    def study_design(self):
        """Gets the study_design of this MongoTrial.  # noqa: E501


        :return: The study_design of this MongoTrial.  # noqa: E501
        :rtype: MongoTrialStudyDesign
        """
        return self._study_design

    @study_design.setter
    def study_design(self, study_design):
        """Sets the study_design of this MongoTrial.


        :param study_design: The study_design of this MongoTrial.  # noqa: E501
        :type: MongoTrialStudyDesign
        """

        self._study_design = study_design

    @property
    def start_date(self):
        """Gets the start_date of this MongoTrial.  # noqa: E501


        :return: The start_date of this MongoTrial.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this MongoTrial.


        :param start_date: The start_date of this MongoTrial.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def completion_date(self):
        """Gets the completion_date of this MongoTrial.  # noqa: E501


        :return: The completion_date of this MongoTrial.  # noqa: E501
        :rtype: datetime
        """
        return self._completion_date

    @completion_date.setter
    def completion_date(self, completion_date):
        """Sets the completion_date of this MongoTrial.


        :param completion_date: The completion_date of this MongoTrial.  # noqa: E501
        :type: datetime
        """

        self._completion_date = completion_date

    @property
    def first_received_date(self):
        """Gets the first_received_date of this MongoTrial.  # noqa: E501


        :return: The first_received_date of this MongoTrial.  # noqa: E501
        :rtype: datetime
        """
        return self._first_received_date

    @first_received_date.setter
    def first_received_date(self, first_received_date):
        """Sets the first_received_date of this MongoTrial.


        :param first_received_date: The first_received_date of this MongoTrial.  # noqa: E501
        :type: datetime
        """

        self._first_received_date = first_received_date

    @property
    def last_changed_date(self):
        """Gets the last_changed_date of this MongoTrial.  # noqa: E501


        :return: The last_changed_date of this MongoTrial.  # noqa: E501
        :rtype: datetime
        """
        return self._last_changed_date

    @last_changed_date.setter
    def last_changed_date(self, last_changed_date):
        """Sets the last_changed_date of this MongoTrial.


        :param last_changed_date: The last_changed_date of this MongoTrial.  # noqa: E501
        :type: datetime
        """

        self._last_changed_date = last_changed_date

    @property
    def verification_date(self):
        """Gets the verification_date of this MongoTrial.  # noqa: E501


        :return: The verification_date of this MongoTrial.  # noqa: E501
        :rtype: datetime
        """
        return self._verification_date

    @verification_date.setter
    def verification_date(self, verification_date):
        """Sets the verification_date of this MongoTrial.


        :param verification_date: The verification_date of this MongoTrial.  # noqa: E501
        :type: datetime
        """

        self._verification_date = verification_date

    @property
    def sponsors(self):
        """Gets the sponsors of this MongoTrial.  # noqa: E501


        :return: The sponsors of this MongoTrial.  # noqa: E501
        :rtype: list[ClinicalTrialSponsors]
        """
        return self._sponsors

    @sponsors.setter
    def sponsors(self, sponsors):
        """Sets the sponsors of this MongoTrial.


        :param sponsors: The sponsors of this MongoTrial.  # noqa: E501
        :type: list[ClinicalTrialSponsors]
        """

        self._sponsors = sponsors

    @property
    def conditions(self):
        """Gets the conditions of this MongoTrial.  # noqa: E501


        :return: The conditions of this MongoTrial.  # noqa: E501
        :rtype: list[str]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this MongoTrial.


        :param conditions: The conditions of this MongoTrial.  # noqa: E501
        :type: list[str]
        """

        self._conditions = conditions

    @property
    def interventions(self):
        """Gets the interventions of this MongoTrial.  # noqa: E501


        :return: The interventions of this MongoTrial.  # noqa: E501
        :rtype: list[ClinicalTrialInterventions]
        """
        return self._interventions

    @interventions.setter
    def interventions(self, interventions):
        """Sets the interventions of this MongoTrial.


        :param interventions: The interventions of this MongoTrial.  # noqa: E501
        :type: list[ClinicalTrialInterventions]
        """

        self._interventions = interventions

    @property
    def keywords(self):
        """Gets the keywords of this MongoTrial.  # noqa: E501


        :return: The keywords of this MongoTrial.  # noqa: E501
        :rtype: list[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this MongoTrial.


        :param keywords: The keywords of this MongoTrial.  # noqa: E501
        :type: list[str]
        """

        self._keywords = keywords

    @property
    def arm_groups(self):
        """Gets the arm_groups of this MongoTrial.  # noqa: E501


        :return: The arm_groups of this MongoTrial.  # noqa: E501
        :rtype: list[ClinicalTrialArmGroups]
        """
        return self._arm_groups

    @arm_groups.setter
    def arm_groups(self, arm_groups):
        """Sets the arm_groups of this MongoTrial.


        :param arm_groups: The arm_groups of this MongoTrial.  # noqa: E501
        :type: list[ClinicalTrialArmGroups]
        """

        self._arm_groups = arm_groups

    @property
    def primary_outcomes(self):
        """Gets the primary_outcomes of this MongoTrial.  # noqa: E501


        :return: The primary_outcomes of this MongoTrial.  # noqa: E501
        :rtype: list[ClinicalTrialPrimaryOutcomes]
        """
        return self._primary_outcomes

    @primary_outcomes.setter
    def primary_outcomes(self, primary_outcomes):
        """Sets the primary_outcomes of this MongoTrial.


        :param primary_outcomes: The primary_outcomes of this MongoTrial.  # noqa: E501
        :type: list[ClinicalTrialPrimaryOutcomes]
        """

        self._primary_outcomes = primary_outcomes

    @property
    def secondary_outcomes(self):
        """Gets the secondary_outcomes of this MongoTrial.  # noqa: E501


        :return: The secondary_outcomes of this MongoTrial.  # noqa: E501
        :rtype: list[ClinicalTrialPrimaryOutcomes]
        """
        return self._secondary_outcomes

    @secondary_outcomes.setter
    def secondary_outcomes(self, secondary_outcomes):
        """Sets the secondary_outcomes of this MongoTrial.


        :param secondary_outcomes: The secondary_outcomes of this MongoTrial.  # noqa: E501
        :type: list[ClinicalTrialPrimaryOutcomes]
        """

        self._secondary_outcomes = secondary_outcomes

    @property
    def other_outcomes(self):
        """Gets the other_outcomes of this MongoTrial.  # noqa: E501


        :return: The other_outcomes of this MongoTrial.  # noqa: E501
        :rtype: list[ClinicalTrialPrimaryOutcomes]
        """
        return self._other_outcomes

    @other_outcomes.setter
    def other_outcomes(self, other_outcomes):
        """Sets the other_outcomes of this MongoTrial.


        :param other_outcomes: The other_outcomes of this MongoTrial.  # noqa: E501
        :type: list[ClinicalTrialPrimaryOutcomes]
        """

        self._other_outcomes = other_outcomes

    @property
    def eligibility(self):
        """Gets the eligibility of this MongoTrial.  # noqa: E501


        :return: The eligibility of this MongoTrial.  # noqa: E501
        :rtype: ClinicalTrialEligibility
        """
        return self._eligibility

    @eligibility.setter
    def eligibility(self, eligibility):
        """Sets the eligibility of this MongoTrial.


        :param eligibility: The eligibility of this MongoTrial.  # noqa: E501
        :type: ClinicalTrialEligibility
        """

        self._eligibility = eligibility

    @property
    def enrollment(self):
        """Gets the enrollment of this MongoTrial.  # noqa: E501


        :return: The enrollment of this MongoTrial.  # noqa: E501
        :rtype: int
        """
        return self._enrollment

    @enrollment.setter
    def enrollment(self, enrollment):
        """Sets the enrollment of this MongoTrial.


        :param enrollment: The enrollment of this MongoTrial.  # noqa: E501
        :type: int
        """

        self._enrollment = enrollment

    @property
    def min_age(self):
        """Gets the min_age of this MongoTrial.  # noqa: E501


        :return: The min_age of this MongoTrial.  # noqa: E501
        :rtype: float
        """
        return self._min_age

    @min_age.setter
    def min_age(self, min_age):
        """Sets the min_age of this MongoTrial.


        :param min_age: The min_age of this MongoTrial.  # noqa: E501
        :type: float
        """
        if min_age is None:
            raise ValueError("Invalid value for `min_age`, must not be `None`")  # noqa: E501

        self._min_age = min_age

    @property
    def max_age(self):
        """Gets the max_age of this MongoTrial.  # noqa: E501


        :return: The max_age of this MongoTrial.  # noqa: E501
        :rtype: float
        """
        return self._max_age

    @max_age.setter
    def max_age(self, max_age):
        """Sets the max_age of this MongoTrial.


        :param max_age: The max_age of this MongoTrial.  # noqa: E501
        :type: float
        """
        if max_age is None:
            raise ValueError("Invalid value for `max_age`, must not be `None`")  # noqa: E501

        self._max_age = max_age

    @property
    def gender(self):
        """Gets the gender of this MongoTrial.  # noqa: E501


        :return: The gender of this MongoTrial.  # noqa: E501
        :rtype: list[str]
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this MongoTrial.


        :param gender: The gender of this MongoTrial.  # noqa: E501
        :type: list[str]
        """

        self._gender = gender

    @property
    def overall_official(self):
        """Gets the overall_official of this MongoTrial.  # noqa: E501


        :return: The overall_official of this MongoTrial.  # noqa: E501
        :rtype: list[ClinicalTrialOverallOfficial]
        """
        return self._overall_official

    @overall_official.setter
    def overall_official(self, overall_official):
        """Sets the overall_official of this MongoTrial.


        :param overall_official: The overall_official of this MongoTrial.  # noqa: E501
        :type: list[ClinicalTrialOverallOfficial]
        """

        self._overall_official = overall_official

    @property
    def overall_contact(self):
        """Gets the overall_contact of this MongoTrial.  # noqa: E501


        :return: The overall_contact of this MongoTrial.  # noqa: E501
        :rtype: ClinicalTrialOverallOfficial
        """
        return self._overall_contact

    @overall_contact.setter
    def overall_contact(self, overall_contact):
        """Sets the overall_contact of this MongoTrial.


        :param overall_contact: The overall_contact of this MongoTrial.  # noqa: E501
        :type: ClinicalTrialOverallOfficial
        """

        self._overall_contact = overall_contact

    @property
    def overall_contact_backup(self):
        """Gets the overall_contact_backup of this MongoTrial.  # noqa: E501


        :return: The overall_contact_backup of this MongoTrial.  # noqa: E501
        :rtype: ClinicalTrialOverallOfficial
        """
        return self._overall_contact_backup

    @overall_contact_backup.setter
    def overall_contact_backup(self, overall_contact_backup):
        """Sets the overall_contact_backup of this MongoTrial.


        :param overall_contact_backup: The overall_contact_backup of this MongoTrial.  # noqa: E501
        :type: ClinicalTrialOverallOfficial
        """

        self._overall_contact_backup = overall_contact_backup

    @property
    def mm_email(self):
        """Gets the mm_email of this MongoTrial.  # noqa: E501


        :return: The mm_email of this MongoTrial.  # noqa: E501
        :rtype: str
        """
        return self._mm_email

    @mm_email.setter
    def mm_email(self, mm_email):
        """Sets the mm_email of this MongoTrial.


        :param mm_email: The mm_email of this MongoTrial.  # noqa: E501
        :type: str
        """

        self._mm_email = mm_email

    @property
    def wrong_email(self):
        """Gets the wrong_email of this MongoTrial.  # noqa: E501


        :return: The wrong_email of this MongoTrial.  # noqa: E501
        :rtype: bool
        """
        return self._wrong_email

    @wrong_email.setter
    def wrong_email(self, wrong_email):
        """Sets the wrong_email of this MongoTrial.


        :param wrong_email: The wrong_email of this MongoTrial.  # noqa: E501
        :type: bool
        """

        self._wrong_email = wrong_email

    @property
    def locations(self):
        """Gets the locations of this MongoTrial.  # noqa: E501


        :return: The locations of this MongoTrial.  # noqa: E501
        :rtype: list[MongoTrialLocations]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this MongoTrial.


        :param locations: The locations of this MongoTrial.  # noqa: E501
        :type: list[MongoTrialLocations]
        """

        self._locations = locations

    @property
    def countries(self):
        """Gets the countries of this MongoTrial.  # noqa: E501


        :return: The countries of this MongoTrial.  # noqa: E501
        :rtype: list[ClinicalTrialCountries]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this MongoTrial.


        :param countries: The countries of this MongoTrial.  # noqa: E501
        :type: list[ClinicalTrialCountries]
        """

        self._countries = countries

    @property
    def inclusion_criteria(self):
        """Gets the inclusion_criteria of this MongoTrial.  # noqa: E501


        :return: The inclusion_criteria of this MongoTrial.  # noqa: E501
        :rtype: str
        """
        return self._inclusion_criteria

    @inclusion_criteria.setter
    def inclusion_criteria(self, inclusion_criteria):
        """Sets the inclusion_criteria of this MongoTrial.


        :param inclusion_criteria: The inclusion_criteria of this MongoTrial.  # noqa: E501
        :type: str
        """

        self._inclusion_criteria = inclusion_criteria

    @property
    def exclusion_criteria(self):
        """Gets the exclusion_criteria of this MongoTrial.  # noqa: E501


        :return: The exclusion_criteria of this MongoTrial.  # noqa: E501
        :rtype: str
        """
        return self._exclusion_criteria

    @exclusion_criteria.setter
    def exclusion_criteria(self, exclusion_criteria):
        """Sets the exclusion_criteria of this MongoTrial.


        :param exclusion_criteria: The exclusion_criteria of this MongoTrial.  # noqa: E501
        :type: str
        """

        self._exclusion_criteria = exclusion_criteria

    @property
    def synonyms(self):
        """Gets the synonyms of this MongoTrial.  # noqa: E501


        :return: The synonyms of this MongoTrial.  # noqa: E501
        :rtype: list[MongoTrialSynonyms]
        """
        return self._synonyms

    @synonyms.setter
    def synonyms(self, synonyms):
        """Sets the synonyms of this MongoTrial.


        :param synonyms: The synonyms of this MongoTrial.  # noqa: E501
        :type: list[MongoTrialSynonyms]
        """

        self._synonyms = synonyms

    @property
    def acronym(self):
        """Gets the acronym of this MongoTrial.  # noqa: E501


        :return: The acronym of this MongoTrial.  # noqa: E501
        :rtype: str
        """
        return self._acronym

    @acronym.setter
    def acronym(self, acronym):
        """Sets the acronym of this MongoTrial.


        :param acronym: The acronym of this MongoTrial.  # noqa: E501
        :type: str
        """

        self._acronym = acronym

    @property
    def link(self):
        """Gets the link of this MongoTrial.  # noqa: E501


        :return: The link of this MongoTrial.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this MongoTrial.


        :param link: The link of this MongoTrial.  # noqa: E501
        :type: str
        """

        self._link = link

    @property
    def who_link(self):
        """Gets the who_link of this MongoTrial.  # noqa: E501


        :return: The who_link of this MongoTrial.  # noqa: E501
        :rtype: str
        """
        return self._who_link

    @who_link.setter
    def who_link(self, who_link):
        """Sets the who_link of this MongoTrial.


        :param who_link: The who_link of this MongoTrial.  # noqa: E501
        :type: str
        """

        self._who_link = who_link

    @property
    def valid(self):
        """Gets the valid of this MongoTrial.  # noqa: E501


        :return: The valid of this MongoTrial.  # noqa: E501
        :rtype: Object
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this MongoTrial.


        :param valid: The valid of this MongoTrial.  # noqa: E501
        :type: Object
        """

        self._valid = valid

    @property
    def valid_message(self):
        """Gets the valid_message of this MongoTrial.  # noqa: E501


        :return: The valid_message of this MongoTrial.  # noqa: E501
        :rtype: str
        """
        return self._valid_message

    @valid_message.setter
    def valid_message(self, valid_message):
        """Sets the valid_message of this MongoTrial.


        :param valid_message: The valid_message of this MongoTrial.  # noqa: E501
        :type: str
        """

        self._valid_message = valid_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MongoTrial, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MongoTrial):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
