# coding: utf-8

"""
    MolecularMatch MMPower

    MMPower API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@molecularmatch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class DrugDosages(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'form': 'str',
        'route': 'str',
        'strength': 'str'
    }

    attribute_map = {
        'form': 'form',
        'route': 'route',
        'strength': 'strength'
    }

    def __init__(self, form=None, route=None, strength=None):  # noqa: E501
        """DrugDosages - a model defined in Swagger"""  # noqa: E501
        self._form = None
        self._route = None
        self._strength = None
        self.discriminator = None
        if form is not None:
            self.form = form
        if route is not None:
            self.route = route
        if strength is not None:
            self.strength = strength

    @property
    def form(self):
        """Gets the form of this DrugDosages.  # noqa: E501


        :return: The form of this DrugDosages.  # noqa: E501
        :rtype: str
        """
        return self._form

    @form.setter
    def form(self, form):
        """Sets the form of this DrugDosages.


        :param form: The form of this DrugDosages.  # noqa: E501
        :type: str
        """

        self._form = form

    @property
    def route(self):
        """Gets the route of this DrugDosages.  # noqa: E501


        :return: The route of this DrugDosages.  # noqa: E501
        :rtype: str
        """
        return self._route

    @route.setter
    def route(self, route):
        """Sets the route of this DrugDosages.


        :param route: The route of this DrugDosages.  # noqa: E501
        :type: str
        """

        self._route = route

    @property
    def strength(self):
        """Gets the strength of this DrugDosages.  # noqa: E501


        :return: The strength of this DrugDosages.  # noqa: E501
        :rtype: str
        """
        return self._strength

    @strength.setter
    def strength(self, strength):
        """Sets the strength of this DrugDosages.


        :param strength: The strength of this DrugDosages.  # noqa: E501
        :type: str
        """

        self._strength = strength

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DrugDosages, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DrugDosages):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
