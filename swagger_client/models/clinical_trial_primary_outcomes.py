# coding: utf-8

"""
    MolecularMatch MMPower

    MMPower API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@molecularmatch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ClinicalTrialPrimaryOutcomes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'measure': 'str',
        'time_frame': 'str',
        'description': 'str'
    }

    attribute_map = {
        'measure': 'measure',
        'time_frame': 'time_frame',
        'description': 'description'
    }

    def __init__(self, measure=None, time_frame=None, description=None):  # noqa: E501
        """ClinicalTrialPrimaryOutcomes - a model defined in Swagger"""  # noqa: E501
        self._measure = None
        self._time_frame = None
        self._description = None
        self.discriminator = None
        self.measure = measure
        if time_frame is not None:
            self.time_frame = time_frame
        if description is not None:
            self.description = description

    @property
    def measure(self):
        """Gets the measure of this ClinicalTrialPrimaryOutcomes.  # noqa: E501


        :return: The measure of this ClinicalTrialPrimaryOutcomes.  # noqa: E501
        :rtype: str
        """
        return self._measure

    @measure.setter
    def measure(self, measure):
        """Sets the measure of this ClinicalTrialPrimaryOutcomes.


        :param measure: The measure of this ClinicalTrialPrimaryOutcomes.  # noqa: E501
        :type: str
        """
        if measure is None:
            raise ValueError("Invalid value for `measure`, must not be `None`")  # noqa: E501

        self._measure = measure

    @property
    def time_frame(self):
        """Gets the time_frame of this ClinicalTrialPrimaryOutcomes.  # noqa: E501


        :return: The time_frame of this ClinicalTrialPrimaryOutcomes.  # noqa: E501
        :rtype: str
        """
        return self._time_frame

    @time_frame.setter
    def time_frame(self, time_frame):
        """Sets the time_frame of this ClinicalTrialPrimaryOutcomes.


        :param time_frame: The time_frame of this ClinicalTrialPrimaryOutcomes.  # noqa: E501
        :type: str
        """

        self._time_frame = time_frame

    @property
    def description(self):
        """Gets the description of this ClinicalTrialPrimaryOutcomes.  # noqa: E501


        :return: The description of this ClinicalTrialPrimaryOutcomes.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ClinicalTrialPrimaryOutcomes.


        :param description: The description of this ClinicalTrialPrimaryOutcomes.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClinicalTrialPrimaryOutcomes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClinicalTrialPrimaryOutcomes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
