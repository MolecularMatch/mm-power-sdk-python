# coding: utf-8

"""
    MolecularMatch MMPower

    MMPower API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@molecularmatch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class DrugPharmacology(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'indication': 'str',
        'pharmacodynamics': 'str',
        'mechanism_of_action': 'str',
        'absorption': 'str',
        'toxicity': 'str',
        'protein_binding': 'str',
        'metabolism': 'str',
        'half_life': 'str',
        'route_of_elimination': 'str',
        'volume_of_distribution': 'str',
        'clearance': 'str'
    }

    attribute_map = {
        'indication': 'indication',
        'pharmacodynamics': 'pharmacodynamics',
        'mechanism_of_action': 'mechanism_of_action',
        'absorption': 'absorption',
        'toxicity': 'toxicity',
        'protein_binding': 'protein_binding',
        'metabolism': 'metabolism',
        'half_life': 'half_life',
        'route_of_elimination': 'route_of_elimination',
        'volume_of_distribution': 'volume_of_distribution',
        'clearance': 'clearance'
    }

    def __init__(self, indication=None, pharmacodynamics=None, mechanism_of_action=None, absorption=None, toxicity=None, protein_binding=None, metabolism=None, half_life=None, route_of_elimination=None, volume_of_distribution=None, clearance=None):  # noqa: E501
        """DrugPharmacology - a model defined in Swagger"""  # noqa: E501
        self._indication = None
        self._pharmacodynamics = None
        self._mechanism_of_action = None
        self._absorption = None
        self._toxicity = None
        self._protein_binding = None
        self._metabolism = None
        self._half_life = None
        self._route_of_elimination = None
        self._volume_of_distribution = None
        self._clearance = None
        self.discriminator = None
        if indication is not None:
            self.indication = indication
        if pharmacodynamics is not None:
            self.pharmacodynamics = pharmacodynamics
        if mechanism_of_action is not None:
            self.mechanism_of_action = mechanism_of_action
        if absorption is not None:
            self.absorption = absorption
        if toxicity is not None:
            self.toxicity = toxicity
        if protein_binding is not None:
            self.protein_binding = protein_binding
        if metabolism is not None:
            self.metabolism = metabolism
        if half_life is not None:
            self.half_life = half_life
        if route_of_elimination is not None:
            self.route_of_elimination = route_of_elimination
        if volume_of_distribution is not None:
            self.volume_of_distribution = volume_of_distribution
        if clearance is not None:
            self.clearance = clearance

    @property
    def indication(self):
        """Gets the indication of this DrugPharmacology.  # noqa: E501


        :return: The indication of this DrugPharmacology.  # noqa: E501
        :rtype: str
        """
        return self._indication

    @indication.setter
    def indication(self, indication):
        """Sets the indication of this DrugPharmacology.


        :param indication: The indication of this DrugPharmacology.  # noqa: E501
        :type: str
        """

        self._indication = indication

    @property
    def pharmacodynamics(self):
        """Gets the pharmacodynamics of this DrugPharmacology.  # noqa: E501


        :return: The pharmacodynamics of this DrugPharmacology.  # noqa: E501
        :rtype: str
        """
        return self._pharmacodynamics

    @pharmacodynamics.setter
    def pharmacodynamics(self, pharmacodynamics):
        """Sets the pharmacodynamics of this DrugPharmacology.


        :param pharmacodynamics: The pharmacodynamics of this DrugPharmacology.  # noqa: E501
        :type: str
        """

        self._pharmacodynamics = pharmacodynamics

    @property
    def mechanism_of_action(self):
        """Gets the mechanism_of_action of this DrugPharmacology.  # noqa: E501


        :return: The mechanism_of_action of this DrugPharmacology.  # noqa: E501
        :rtype: str
        """
        return self._mechanism_of_action

    @mechanism_of_action.setter
    def mechanism_of_action(self, mechanism_of_action):
        """Sets the mechanism_of_action of this DrugPharmacology.


        :param mechanism_of_action: The mechanism_of_action of this DrugPharmacology.  # noqa: E501
        :type: str
        """

        self._mechanism_of_action = mechanism_of_action

    @property
    def absorption(self):
        """Gets the absorption of this DrugPharmacology.  # noqa: E501


        :return: The absorption of this DrugPharmacology.  # noqa: E501
        :rtype: str
        """
        return self._absorption

    @absorption.setter
    def absorption(self, absorption):
        """Sets the absorption of this DrugPharmacology.


        :param absorption: The absorption of this DrugPharmacology.  # noqa: E501
        :type: str
        """

        self._absorption = absorption

    @property
    def toxicity(self):
        """Gets the toxicity of this DrugPharmacology.  # noqa: E501


        :return: The toxicity of this DrugPharmacology.  # noqa: E501
        :rtype: str
        """
        return self._toxicity

    @toxicity.setter
    def toxicity(self, toxicity):
        """Sets the toxicity of this DrugPharmacology.


        :param toxicity: The toxicity of this DrugPharmacology.  # noqa: E501
        :type: str
        """

        self._toxicity = toxicity

    @property
    def protein_binding(self):
        """Gets the protein_binding of this DrugPharmacology.  # noqa: E501


        :return: The protein_binding of this DrugPharmacology.  # noqa: E501
        :rtype: str
        """
        return self._protein_binding

    @protein_binding.setter
    def protein_binding(self, protein_binding):
        """Sets the protein_binding of this DrugPharmacology.


        :param protein_binding: The protein_binding of this DrugPharmacology.  # noqa: E501
        :type: str
        """

        self._protein_binding = protein_binding

    @property
    def metabolism(self):
        """Gets the metabolism of this DrugPharmacology.  # noqa: E501


        :return: The metabolism of this DrugPharmacology.  # noqa: E501
        :rtype: str
        """
        return self._metabolism

    @metabolism.setter
    def metabolism(self, metabolism):
        """Sets the metabolism of this DrugPharmacology.


        :param metabolism: The metabolism of this DrugPharmacology.  # noqa: E501
        :type: str
        """

        self._metabolism = metabolism

    @property
    def half_life(self):
        """Gets the half_life of this DrugPharmacology.  # noqa: E501


        :return: The half_life of this DrugPharmacology.  # noqa: E501
        :rtype: str
        """
        return self._half_life

    @half_life.setter
    def half_life(self, half_life):
        """Sets the half_life of this DrugPharmacology.


        :param half_life: The half_life of this DrugPharmacology.  # noqa: E501
        :type: str
        """

        self._half_life = half_life

    @property
    def route_of_elimination(self):
        """Gets the route_of_elimination of this DrugPharmacology.  # noqa: E501


        :return: The route_of_elimination of this DrugPharmacology.  # noqa: E501
        :rtype: str
        """
        return self._route_of_elimination

    @route_of_elimination.setter
    def route_of_elimination(self, route_of_elimination):
        """Sets the route_of_elimination of this DrugPharmacology.


        :param route_of_elimination: The route_of_elimination of this DrugPharmacology.  # noqa: E501
        :type: str
        """

        self._route_of_elimination = route_of_elimination

    @property
    def volume_of_distribution(self):
        """Gets the volume_of_distribution of this DrugPharmacology.  # noqa: E501


        :return: The volume_of_distribution of this DrugPharmacology.  # noqa: E501
        :rtype: str
        """
        return self._volume_of_distribution

    @volume_of_distribution.setter
    def volume_of_distribution(self, volume_of_distribution):
        """Sets the volume_of_distribution of this DrugPharmacology.


        :param volume_of_distribution: The volume_of_distribution of this DrugPharmacology.  # noqa: E501
        :type: str
        """

        self._volume_of_distribution = volume_of_distribution

    @property
    def clearance(self):
        """Gets the clearance of this DrugPharmacology.  # noqa: E501


        :return: The clearance of this DrugPharmacology.  # noqa: E501
        :rtype: str
        """
        return self._clearance

    @clearance.setter
    def clearance(self, clearance):
        """Sets the clearance of this DrugPharmacology.


        :param clearance: The clearance of this DrugPharmacology.  # noqa: E501
        :type: str
        """

        self._clearance = clearance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DrugPharmacology, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DrugPharmacology):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
